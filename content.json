{"meta":{"title":"devtory","subtitle":"Summary","description":null,"author":"devtory","url":"https://devtory.github.io"},"pages":[],"posts":[{"title":"ReactNative(Expo)에 Mobx(ES6) 적용하기","slug":"ReactNative(Expo)에 Mobx(ES6) 적용하기","date":"2018-11-27T05:40:06.000Z","updated":"2018-12-08T04:20:51.117Z","comments":true,"path":"2018/11/27/ReactNative(Expo)에 Mobx(ES6) 적용하기/","link":"","permalink":"https://devtory.github.io/2018/11/27/ReactNative(Expo)에 Mobx(ES6) 적용하기/","excerpt":"","text":"ReactNative(Expo)에 Mobx(ES6) 적용하기 정리 목적으로 작성한 글 입니다 목표 : Expo CLI를 통해 생성된 ES6 프로젝트에 Mobx 적용하기 Why? ES6 지금까지 까지 Typescript를 사용했지만, 한가지 아쉬운점은 레퍼런스가 부족하다는점이다. 다행히 Server와 Web까지는 1~2년 전보다 생태계가 급격히 발전하여 좋은 레퍼런스가 생겨나고 있어 Typescript를 적용하기 좋은 환경이 갖추어졌다. 하지만 Expo에서는 Typescript에 관한 레퍼런스가 적어, 당분간 Tyepscript를 고집하지 않고 ES6를 사용하고, 추후 조금더 생태계가 조성되면 Typescript를 사용 해야겠다. 환경 123Windows 10Node.js 8.11.2Expo CLI 2.X (Ver 2.x → CRNA 기능 통합, XDE 웹기반으로 변경) Expo CLI 설치 1$ yarn global expo-cli ※ 또는 npm isntall -g expo-cli 프로젝트 생성 1$ expo init &lt;Project Name&gt; ※ \"blank app\" 선택 MobX 설치 12$ cd &lt;Project Name&gt;$ yarn add mobx mobx-react 데코레이터 관련 Babel 플러그인 설치 1$ yarn add @babel/plugin-proposal-decorators @babel/plugin-proposal-class-properties --dev babel.config.js 파일에 플러그인 적용 12345678910module.exports = function(api) &#123; api.cache(true); return &#123; presets: ['babel-preset-expo'], plugins: [ ['@babel/plugin-proposal-decorators', &#123; legacy: true &#125;], ['@babel/plugin-proposal-class-properties', &#123; \"loose\": true&#125;] ] &#125;;&#125;; 단순한 카운터를 만들기 위해 카운터 스토어를 생성 엔트리파일 변경 123$ mkdir src$ mv App.js ./src$ touch App.js App.js 파일변경 12import App from './src/App';export default App; Store 생성 src/stores폴더 생성 src/stores/CounterStores.ts 파일 생성 후 아래 내용을 입력 12345678910111213141516171819import &#123; observable, action &#125; from 'mobx';export class CounterStore &#123; @observable counter; constructor() &#123; this.counter = 0; &#125; @action increase = () =&gt; &#123; this.counter++; &#125; @action decrease = () =&gt; &#123; this.counter--; &#125;&#125; src/stores/createStores.js 파일 생성 후 아래 내용을 입력 123456789import &#123; CounterStore &#125; from './CounterStore';export function createStores() &#123; const counterStore = new CounterStore(); // CounterStore 객체 생성 return &#123; counterStore, &#125;;&#125; src/App.js 파일에 Store를 등록 1234567891011121314151617181920...import &#123; Provider &#125; from 'mobx-react';import &#123; createStores &#125; from './stores/createStores';import Counter from './Components/Counter';const stores = createStores();export default class App extends React.Component &#123; render() &#123; return ( &lt;Provider &#123;...stores&#125;&gt; &lt;View style=&#123;styles.container&#125;&gt; &lt;Counter /&gt; &lt;/View&gt; &lt;/Provider&gt; ); &#125;&#125;... src/components/Counter/index.js 파일을 생성하여 Store 사용 테스트 12345678910111213141516171819202122232425import React from 'react';import &#123; Text, View, Button &#125; from 'react-native';import &#123; observer, inject &#125; from 'mobx-react';@inject('counterStore')@observerexport default class App extends React.Component &#123; render() &#123; const &#123; counter, increase, decrease&#125; = this.props.counterStore; return ( &lt;View&gt; &lt;Text&gt;&#123;counter&#125;&lt;/Text&gt; &lt;Button onPress=&#123;increase&#125; title=\"Increase\" /&gt; &lt;Button onPress=&#123;decrease&#125; title=\"Decrease\" /&gt; &lt;/View&gt; ); &#125;&#125; 만약 VS Code를 사용하고 있다면 ES6를 사용함에도 불구하고, 데코렝터 에서 tslint 경고가 발생하는데, 아래 방법으로 경고 해제 Root 폴더 아래 tsconfig.json파일을 생성후 아래 내용을 입력 123456&#123; \"compilerOptions\": &#123; \"experimentalDecorators\": true, \"allowJs\": true &#125;&#125; ​","categories":[{"name":"Mobile","slug":"Mobile","permalink":"https://devtory.github.io/categories/Mobile/"},{"name":"ReactNative","slug":"Mobile/ReactNative","permalink":"https://devtory.github.io/categories/Mobile/ReactNative/"}],"tags":[{"name":"Mobx","slug":"Mobx","permalink":"https://devtory.github.io/tags/Mobx/"},{"name":"ReactNative","slug":"ReactNative","permalink":"https://devtory.github.io/tags/ReactNative/"},{"name":"ES6","slug":"ES6","permalink":"https://devtory.github.io/tags/ES6/"}]},{"title":"비동기 프로그래밍과 콜백 함수","slug":"비동기 프로그래밍과 콜백 함수","date":"2018-11-23T06:43:05.000Z","updated":"2018-12-08T04:17:21.589Z","comments":true,"path":"2018/11/23/비동기 프로그래밍과 콜백 함수/","link":"","permalink":"https://devtory.github.io/2018/11/23/비동기 프로그래밍과 콜백 함수/","excerpt":"","text":"비동기 프로그래밍과 콜백 함수 정리 목적으로 작성한 글 입니다 비동기 프로그래밍과 콜백 함수 자바스크립트는 싱글스레드(single-threaded) 프로그래밍 언어 이므로 하나의 콜스택(Call Stack)을 갖고 있다 예를 들어 A함수 내부에서 B함수를 실행시키는 경우 콜스택을 보면, A함수, B함수 순으로 콜스택에 저장 된다 나중에 입력된 B함수 먼저 실행후 순차적으로 A함수가 실행 된다 위 동작을 코드와 이미지로 보면 아래와 같다 123456789function funcB() &#123; ...&#125;function funcA() &#123; funcB();&#125;funcA(); &lt;img src=&quot;비동기 프로그래밍과 콜백 함수/callstack_example.png&quot; title=&quot;콜스택 동작&quot; style=&quot;height: 80%; width:80%&quot; /&gt; 만약, 콜스택에서 실행되는 함수가 실행 시간이 길거나, 응답을 대기해야 하는 함수인 경우 브라우저 또는 Node.js는 블록킹 상태 된다 블록킹 상태에서, Node.js 서버는 다른 요청을 처리 할 수 없고, 브라우저는 UI가 응답대기 상태로 멈춰있게 되어 부정적인 사용자 경험을 제공 따라서 브라우저와 Node.js는 논블록킹 방식의 함수들을 제공하여 비동기 동작을 기본으로 한다 (블록킹 방식의 함수도 제공) 논블록킹 방식의 함수는 실행 지점에서 결과를 받을때 까지 대기하지 않고, 바로 다음 구문을 실행 하므로 결과는 콜백 함수를 이용해 나중에 처리 한다 대표적인 논블록킹(비동기) 함수인 fs.readFile()는 아래 코드와 같이, 콜백함수를 통해 결과를 처리하며, 블록킹 되지 않기 때문에 바로 다음에 호출되는 console.log()를 처리한다 123456789101112const fs = require('fs');fs.readFile('/file.md', (err, data) =&gt; &#123; if (err) throw err; console.log('result'); // 콜백함수를 통해 결과를 처리&#125;);console.log('after read file'); // fs.readfile() 이후 바로 실행//// 실행결과after read fileresult 블록킹과 논블록킹을 http 요청/응답을 예로들어 타임라인 상에 표현해보면 아래와 같다 이벤트 루프(event loop)와 콜백큐(callback queue)는 콜백 함수들을 관리한다 이벤트 루프와 콜백큐는 웹 API(Node.js의 경우 C++ API) 같이 자바스크립트 엔진 외부에 존재 자바스크립트 엔진 내부에 함수가 실행되면 콜스택에 저장되고, 콜백함수들은 콜백큐에 저장 이때, 이벤트 루프는 콜스택을 감시하다가 함수가 실행되어 콜스택이 비워지게 되면 콜백큐에 저장된 콜백함수를 실행한다 비동기 동작의 예로, 웹 API인 setTimeout()함수 호출시 코드는 아래와 같다 1234567console.log(\"Start!\");setTimeout(function timeout() &#123; console.log(\"Timeout Callback!\");&#125;, 2000);console.log(\"Next statement!\"); 실행결과는 아래와 같다 123Start!Next Statement!Timeout Callback! 위 코드의 흐름을 그림으로 나타내보면 아래와 같다 자바 스크립트는 위와 같이 논블로킹 방식의 함수와 콜백 함수를 통해 단일 스레드에서 동시성(concurrency)을 제공한다","categories":[{"name":"Javascript","slug":"Javascript","permalink":"https://devtory.github.io/categories/Javascript/"}],"tags":[{"name":"javascript","slug":"javascript","permalink":"https://devtory.github.io/tags/javascript/"},{"name":"비동기","slug":"비동기","permalink":"https://devtory.github.io/tags/비동기/"},{"name":"asynchronous","slug":"asynchronous","permalink":"https://devtory.github.io/tags/asynchronous/"},{"name":"콜백","slug":"콜백","permalink":"https://devtory.github.io/tags/콜백/"},{"name":"callback","slug":"callback","permalink":"https://devtory.github.io/tags/callback/"}]},{"title":"Express에 Typescript와 Inversify 적용하기","slug":"Express에 Typescript와 Inversify 적용하기","date":"2018-11-16T01:41:47.000Z","updated":"2018-12-08T04:05:25.469Z","comments":true,"path":"2018/11/16/Express에 Typescript와 Inversify 적용하기/","link":"","permalink":"https://devtory.github.io/2018/11/16/Express에 Typescript와 Inversify 적용하기/","excerpt":"","text":"Express에 Typescript와 Inversify 적용하기 정리 목적으로 작성한 글 입니다 목표 : Express 프로젝트에 Typescript와 Inversify를 적용 환경 123Windows 10Node.js 8.11.2Npm 6.4.1 / yarn 1.7.0 프로젝트 생성 123$ mkdir &lt;프로젝트 폴더&gt;$ cd &lt;프로젝트폴더&gt;$ npm init ※ 요구하는 입력 사항은 상황에 따라 적당히 입력 yarn 설치 yarn 사용 1$ npm install -g yarn Typescript 관련 패키지 설치 1$ yarn add typescript ts-node --dev 루트 폴더 아래 tsconfig.json 파일 생성 후 아래 내용 추가 1234567891011121314151617181920212223&#123; \"compilerOptions\": &#123; \"module\": \"commonjs\", \"target\": \"es6\", \"lib\": [ \"es6\", \"dom\" ], \"noImplicitAny\": false, \"sourceMap\": true, \"emitDecoratorMetadata\": true, \"experimentalDecorators\": true, \"moduleResolution\": \"node\", \"noUnusedLocals\": true, \"resolveJsonModule\": true, \"allowJs\": true, \"outDir\": \"./dist\" &#125;, \"compileOnSave\": false, \"exclude\": [ \"node_modules\" ]&#125; express 관련 패키지 설치 Rest API를 만들것이므로, 템플릿 관련 패키지는 설치하지 않음 12$ yarn add express body-parser cors nodemon$ yarn add @types/express @types/body-parser @types/cors --dev body-parser 미들웨어 요청 데이터를 파싱하여 req.body객체로 접근하는 것을 도와주는 미들웨어 cors 미들웨어 CORS를 제한하는 브라우저 사용시 이를 피하기 위해 사용 nodemon 코드 수정시 서버를 자동을 갱신해주는 유틸 inversify 관련 패키지 설치 12$ yarn add reflect-metadata$ yarn add inversify inversify-binding-decorators inversify-express-utils reflect-metadata typescript의 데코레이터와 같이 실험적인 메타데이터 API를 사용하기 위해 필요한 라이브러리 inversify IOC 컨테이너 라이브러리로, angular2+와 같이 의존성 주입을 통해 서비스를 사용 할 수 있도록 해주는 라이브러리 이제부터 express를 구동을 위한 설정 엔트리 포인트 생성 루트 폴더 아래 index.js파일 생성 (package.json이 있는 폴더) 12require('ts-node/register');require('./src/bootstrap'); 파일생성 1234+-- src +-- controllers/Hello.controller.ts +-- services/Hello.service.ts bootstrap.ts 서비스파일 작성 Hello.service.ts 파일을 아래와 같이 작성 서비스를 통해 Controller와 관심사를 분리 하여 Controller 단순화 (여기서는 데이터베이스를 실제 조작하는 코드 작성) 1234567891011import &#123; injectable &#125; from 'inversify'@injectable()export class HelloService &#123; public getData() &#123; return &#123; state: \"success\", message: \"Hello Express, Typescript, Inversify!\", &#125; &#125;&#125; @injectable() 의존성 주입이 가능함을 명시해주는 데코레이터 IOC 컨테이너에 등록 하면 이후에는 의존성 주입을 통해 제어권을 컨테이너가 조정 서버시작 및 서비스 파일 등록 bootstrap.ts 파일을 아래와 같이 작성 12345678910111213141516171819202122232425262728293031323334353637383940import 'reflect-metadata';import * as bodyParser from 'body-parser';import * as cors from 'cors';import &#123; InversifyExpressServer &#125; from 'inversify-express-utils';import &#123; AsyncContainerModule, Container &#125; from 'inversify';import &#123; HelloService &#125; from './services/Hello.service';/* Bind Controller */const bindings = new AsyncContainerModule(async (bind) =&gt; &#123; await require('./controllers/Hello.controller');&#125;);async function bootstrap() &#123; /* Create IOC Container */ let inversify_ioc = new Container(); await inversify_ioc.loadAsync(bindings); /* Add Service */ inversify_ioc.bind&lt;HelloService&gt;('HelloService').to(HelloService); /* Express Server &amp; Middleware */ let server = new InversifyExpressServer(inversify_ioc); server.setConfig((app) =&gt; &#123; app.use(bodyParser.urlencoded(&#123;extended: true&#125;)); app.use(bodyParser.json()); app.use(cors()); &#125;); let serverBuild = server.build(); serverBuild.listen(3301, '127.0.0.1'); console.log(`Start server..`); console.log(`Listen server on port : 3301..`);&#125;bootstrap(); Bind Controller 이하 컨트롤러 파일을 Inversefy 컨테이너 모듈과 바인딩 URL을 컨트롤러 파일 내부 클래스/매소드와 맵핑 이후 생성되는 컨트롤러는 아래에 계속해서 추가 Add Service 이하 위에서 생성한 Hello.service.ts 파일을 컨테이너에 등록 일반적인 객체 뿐만 아니라 싱글톤등 다양한 형식을 지원 이후 생성되는 서비스는 아래에 계속해서 바인딩 Express Server &amp; Middleware 이하 inversify-express-util에서 제공하는 방식으로 Express 서버를 생성하고 미들웨어를 등록 컨트롤러 작성 Hello.controller.ts 파일 작성 123456789101112131415161718import * as express from 'express';import &#123; inject &#125; from 'inversify';import &#123; controller, httpGet, response, request &#125; from 'inversify-express-utils';import &#123; HelloService &#125; from '../services/Hello.service';@controller('/hello')export class HelloController &#123; constructor( @inject('HelloService') private _hello: HelloService ) &#123; &#125; @httpGet('/') public async getData(@response() res: express.Response, @request() req: express.Request) &#123; return res.status(200).json(this._hello.getData()) &#125;&#125; 위에서 생성한 Hello 서비스를 HelloController의 생성자에 private 멤버 변수로 주입 컨트롤러 내부에서는 this._hello를 통해 Hello서비스에 접근/사용 컨트롤러와 서비스가 분리되어 컨트롤러 로직이 훨씬 단순해짐 스크립트 등록 package.json의 scripts 부분을 수정 123456789&#123; ... \"scripts\": &#123; \"start\": \"node index.js\", \"start:watch\": \"nodemon index.js\", \"start:prod\": \"rm -rf ./dist/ &amp;&amp; tsc &amp;&amp; node dist/index.js\" &#125; ...&#125; 실행 1yarn start:watch # nodemon을 통해 실행 *","categories":[{"name":"Backend","slug":"Backend","permalink":"https://devtory.github.io/categories/Backend/"},{"name":"Express","slug":"Backend/Express","permalink":"https://devtory.github.io/categories/Backend/Express/"},{"name":"Typescirpt","slug":"Backend/Express/Typescirpt","permalink":"https://devtory.github.io/categories/Backend/Express/Typescirpt/"}],"tags":[{"name":"Backend","slug":"Backend","permalink":"https://devtory.github.io/tags/Backend/"},{"name":"Express","slug":"Express","permalink":"https://devtory.github.io/tags/Express/"},{"name":"Typescript","slug":"Typescript","permalink":"https://devtory.github.io/tags/Typescript/"}]},{"title":"React Typescript 프로젝트에 MobX 적용","slug":"React Typescript 프로젝트에 MobX 적용","date":"2018-11-13T06:06:19.000Z","updated":"2018-12-08T04:18:37.568Z","comments":true,"path":"2018/11/13/React Typescript 프로젝트에 MobX 적용/","link":"","permalink":"https://devtory.github.io/2018/11/13/React Typescript 프로젝트에 MobX 적용/","excerpt":"","text":"React Typescript 프로젝트에 MobX 적용 정리 목적으로 작성한 글 입니다 목표 : Typescript로 구성된 React 프로젝트에 MobX를 적용하고 Store 기반의 라우터 사용 환경 123Windows 10Node.js 8.11.2CRA 2.1.1 MobX ? MobX는 Redux와 함께 가장 인기있는 상태관리 라이브러리 중 하나 공식홈페이지에서는 MobX를 매우 단순하고 확장성이 좋다고 소개 하고 있다 MobX는 React가 상태를 저장하고 업데이트 하는 방식과 유사한 메커니즘을 제공하기 때문에 React와의 조합이 매우 좋다 프로젝트를 생성 후 MobX를 적용 crea-react-app으로 Typescript 프로젝트 생성 12$ npm install -g create-react-app$ create-react-app &lt;프로젝트명&gt; --scripts-version=react-scripts-ts mobx, react-router 설치 12$ cd &lt;프로젝트명&gt;$ yarn add mobx mobx-react mobX는 타이프스크립트로 작성되어, 타입정의파일(d.ts)이 별도 설치가 필요 없음 데코레이터를 사용하기 위해 tsconfig.json 파일에 아래내용 추가 1234567&#123; \"compilerOptions\": &#123; ..., \"experimentalDecorators\": true &#125;, ...&#125; (선택사항) tslint.json에 귀찮은 옵션을 해제 “ordered-imports”는 모듈 import시 A, B, C 순으로 호출하지 않을 경우 경고 발생 시키므로 해제 1234567&#123; ... \"rules\": &#123; \"ordered-imports\": false &#125; ...&#125; 디렉토리 구조 디렉토리 구조에 대한 대한 표준은 없이 개발자에 따라 다름 아래와 같은 구조로 폴더를 생성 1234567+-- src +-- stores ※ 여러개의 store 생성 가능 +-- constant ※ props로 전달되는 store 객체의 Key값으로 사용될 상수 +-- view +-- containers ※ store가 주입(inject)되는 컴포넌트 +-- components ※ props를 통해 container로부터 store데이터를 전달받음 (권장사항으로 component에서 직접 store를 주입해도 상관없습니다) 단순한 카운터를 예를 들어 스토어와 아래 컴포넌트를 생성 하기 Store 생성 src/stores/CounterStore.ts 파일 생성 후 아래 내용을 입력 123456789101112131415161718import &#123; observable, action &#125; from 'mobx';export class CounterStore &#123; @observable public counter: number; constructor() &#123; this.counter = 0; &#125; @action public increase = () =&gt; &#123; this.counter++; &#125; @action public decrease = () =&gt; &#123; this.counter--; &#125;&#125; 데코레이터 설명 @observable observer로 관찰 가능해짐, 즉 값이 변경되면 observer에게 알림 @action @observable값을 변경 시키는 경우 사용 Store를 구분하기 위한 키(상수) 등록 src/constant/stores.const.ts파일 생성후 아래 내용을 입력 정해진 형식이 없어 나름의 기준으로 이름 선정 1export const COUNTER_STORE = 'counter_store'; Store를 생성하기 위한 함수를 생성 src/stores/createStores.ts파일 생성후 아래 내용을 입력 이후 추가되는 Store는 모두 이곳에 추가 12345678910import &#123; CounterStore &#125; from './CounterStore';import &#123; COUNTER_STORE &#125; from 'src/constant/stores.const';export function createStores() &#123; const counterStore = new CounterStore(); // CounterStore 객체 생성 return &#123; [COUNTER_STORE]: counterStore, &#125;;&#125; Store 등록 src/index.tsx파일을 아래와 같이 수정 123456789101112131415...import &#123; Provider &#125; from 'mobx-react';import &#123; createStores &#125; from 'src/stores/createStores';const stores = createStores();ReactDOM.render( &lt;Provider &#123;...stores&#125;&gt; &lt;App /&gt; &lt;/Provider&gt;, document.getElementById('root') as HTMLElement);... 스토어 사용 컴포넌트 만들기 src/view/containers/Counter/index.tsx 파일을 생성 예제 이므로 components 폴더는 사용하지 않고 containers에 모두 작성 123456789101112131415161718192021222324import * as React from 'react';import &#123; observer, inject &#125; from 'mobx-react';import &#123; CounterStore &#125; from 'src/stores/CounterStore';import &#123; COUNTER_STORE &#125; from 'src/constant/stores.const';@inject( COUNTER_STORE)@observerclass Counter extends React.Component&lt;&#123;&#125;, &#123;&#125;&gt; &#123; public render() &#123; const &#123; counter, increase, decrease &#125; = (this.props[COUNTER_STORE] as CounterStore); return ( &lt;div&gt; &lt;h2&gt;Counter : &#123;counter&#125;&lt;/h2&gt; &lt;button onClick=&#123;increase&#125;&gt;Increase&lt;/button&gt; &lt;button onClick=&#123;decrease&#125;&gt;Decrease&lt;/button&gt; &lt;/div&gt; ); &#125;&#125;export default Counter; @inject 컴포넌트의 props에 스토어 주입 @observer 스토어의 변화를 관찰하여 업데이트시 결과 반영 참고 mobx 공식 저장소 결과","categories":[{"name":"Frontend","slug":"Frontend","permalink":"https://devtory.github.io/categories/Frontend/"},{"name":"React","slug":"Frontend/React","permalink":"https://devtory.github.io/categories/Frontend/React/"}],"tags":[{"name":"React","slug":"React","permalink":"https://devtory.github.io/tags/React/"},{"name":"Mobx","slug":"Mobx","permalink":"https://devtory.github.io/tags/Mobx/"}]},{"title":"ReactNative(Expo)에 Typescript 적용","slug":"ReactNative(Expo)에 Typescript 적용","date":"2018-11-11T08:41:47.000Z","updated":"2018-12-08T04:21:33.019Z","comments":true,"path":"2018/11/11/ReactNative(Expo)에 Typescript 적용/","link":"","permalink":"https://devtory.github.io/2018/11/11/ReactNative(Expo)에 Typescript 적용/","excerpt":"","text":"ReactNative(Expo)에 Typescript 적용 정리 목적으로 작성한 글 입니다 목표 : Expo CLI를 통해 생성된 프로젝트에 Typescript 적용 환경 123Windows 10Node.js 8.11.2Expo CLI 2.X (Ver 2.x → CRNA 기능 통합, XDE 웹기반으로 변경) Expo CLI 설치 1$ yarn global expo-cli ※ 또는 npm isntall -g expo-cli 프로젝트 생성 1$ expo init &lt;Project Name&gt; ※ \"blank app\" 선택 Typescript관련 패키지 설치 123$ cd &lt;Project Name&gt;$ yarn add typescript react-native-typescript-transformer tslib$ yarn add @types/react @types/react-native @types/expo @types/expo__vector-icons --dev tsconfig.json 파일 생성 &amp; 수정 1$ ./node_modules/.bin/tsc.cmd --init ※ \"tsconfig.json\"파일 생성 1234567891011121314151617181920&#123; \"compilerOptions\": &#123; \"target\": \"es2017\", \"module\": \"es2015\", \"lib\": [ \"es2017\" ], \"jsx\": \"react-native\", \"sourceMap\": true, \"noEmit\": true, \"importHelpers\": true, \"moduleResolution\": \"node\", \"allowSyntheticDefaultImports\": true, \"experimentalDecorators\": true, \"emitDecoratorMetadata\": true &#125;, \"exclude\": [ \"node_modules\" ]&#125; tslint.json 파일 생성 세부 설정은 tslint 공식홈 참조 12345678910&#123; \"extends\": [\"tslint:recommended\", \"tslint-react\", \"tslint-config-prettier\"], \"linterOptions\": &#123; \"exclude\": [ \"config/**/*.js\", \"node_modules/**/*.ts\", \"coverage/lcov-report/*.js\" ] &#125;&#125; app.json파일 수정 12345678&#123; \"expo\": &#123; \"packagerOpts\": &#123; \"sourceExts\": [\"ts\", \"tsx\"], \"transformer\": \"node_modules/react-native-typescript-transformer/index.js\" &#125; &#125;&#125; 파일명 변경 12$ mkdir src$ mv App.js src/App.tsx App.ts 파일생성 12import App from './src/App';export default App; 실행 스마트 폰에 Expo앱 설치후 아래 명령어 입력 1$ expo start ※ 스마트폰에서 생성된 QR코드 스캔 결과","categories":[{"name":"Mobile","slug":"Mobile","permalink":"https://devtory.github.io/categories/Mobile/"},{"name":"ReactNative","slug":"Mobile/ReactNative","permalink":"https://devtory.github.io/categories/Mobile/ReactNative/"}],"tags":[{"name":"Typescript","slug":"Typescript","permalink":"https://devtory.github.io/tags/Typescript/"},{"name":"ReactNative","slug":"ReactNative","permalink":"https://devtory.github.io/tags/ReactNative/"},{"name":"Expo","slug":"Expo","permalink":"https://devtory.github.io/tags/Expo/"}]}]}