{"meta":{"title":"unknownerror","subtitle":"Summary","description":null,"author":"celtonrd8","url":"https://devtory.github.io"},"pages":[],"posts":[{"title":"React Typescript 프로젝트에 MobX 적용","slug":"React Typescript 프로젝트에 MobX 적용","date":"2018-11-13T06:06:19.000Z","updated":"2018-11-17T13:04:36.384Z","comments":true,"path":"2018/11/13/React Typescript 프로젝트에 MobX 적용/","link":"","permalink":"https://devtory.github.io/2018/11/13/React Typescript 프로젝트에 MobX 적용/","excerpt":"","text":"React Typescript 프로젝트에 MobX 적용 목표 : Typescript로 구성된 React 프로젝트에 MobX를 적용하고 Store 기반의 라우터 사용 환경 123Windows 10Node.js 8.11.2CRA 2.1.1 MobX란? MobX는 Redux와 함께 가장 인기있는 상태관리 라이브러리 중 하나입니다. 공식홈페이지에서는 Mobx를 매우 단순하고 확장성이 좋다고 소개 하고 있습니다. Redux와 비교해 볼때 충분히 동의할만한 내용입니다. 또한 Mobx는 React가 상태를 저장하고 업데이트 하는 방식과 유사한 메커니즘을 제공하기 때문에 React와의 조합이 매우 강력하다고 합니다. Mobx에 대한 자세한 내용은 공식문서가 잘 정리 되어 있어 공식문서를 추천드립니다. 먼저, 프로젝트를 생성 후 Mobx를 적용해 보도록 하겠습니다. crea-react-app으로 Typescript 프로젝트 생성하기 12$ npm install -g create-react-app$ create-react-app &lt;프로젝트명&gt; --scripts-version=react-scripts-ts mobx, react-router 설치 12$ cd &lt;프로젝트명&gt;$ yarn add mobx mobx-react mobx패키지는 타입정의파일(d.ts)이 내장되어있어 별도 설치가 필요 없습니다. 데코레이터를 사용하기 위해 tsconfig.json 파일에 아래내용 추가 1234567&#123; \"compilerOptions\": &#123; ..., \"experimentalDecorators\": true &#125;, ...&#125; (선택사항) tslint.json에 귀찮은 옵션을 해제 합니다 “ordered-imports”는 모듈 import시 A, B, C 순으로 호출하지 않을 경우 경고를 발생시켜 줍니다. 이 옵션은 아래 내용을 추가하여 해제 하겠습니다. 1234567&#123; ... \"rules\": &#123; \"ordered-imports\": false &#125; ...&#125; 디렉토리 구조 디렉토리 구조에 대한 대한 표준은 없습니다. 여러가지 유형 중 저는 아래와 같은 구조를 선호 합니다. 1234567+-- src +-- stores ※ 여러개의 store 생성 가능 +-- constant ※ props로 전달되는 store 객체의 Key값으로 사용될 상수 +-- view +-- containers ※ store가 주입(inject)되는 컴포넌트 +-- components ※ props를 통해 container로부터 store데이터를 전달받음 (권장사항으로 component에서 직접 store를 주입해도 상관없습니다) 단순한 카운터를 예를 들어 스토어와 아래 컴포넌트를 생성해 보겠습니다. Store 생성 src/stores/CounterStore.ts 파일 생성 후 아래 내용을 입력 합니다. 123456789101112131415161718import &#123; observable, action &#125; from 'mobx';export class CounterStore &#123; @observable public counter: number; constructor() &#123; this.counter = 0; &#125; @action public increment = () =&gt; &#123; this.counter++; &#125; @action public decrement = () =&gt; &#123; this.counter--; &#125;&#125; 데코레이터 설명 @observable : observer로 관찰 가능해짐, 즉 값이 변경되면 observer에게 알림. @action : @observable값을 변경 시키는 경우 사용 Store를 구분하기 위한 키(상수) 등록 src/constant/stores.const.ts파일 생성후 아래 내용을 입력합니다. 언제나 그렇듯 정해진 형식은 없으니 나름의 기준을 정해 이름을 정하시면 됩니다. 1export const COUNTER_STORE = 'counter_store'; Store를 생성하기 위한 함수를 만듭니다 src/stores/createStores.ts파일 생성후 아래 내용을 입력 합니다. 이후 추가되는 Store는 모두 이곳에 작성을 합니다. 12345678910import &#123; CounterStore &#125; from './CounterStore';import &#123; COUNTER_STORE &#125; from 'src/constant/stores.const';export function createStores() &#123; const counterStore = new CounterStore(); // CounterStore 객체 생성 return &#123; [COUNTER_STORE]: counterStore, &#125;;&#125; Store 등록 src/index.tsx파일을 아래와 같이 수정합니다. 123456789101112131415...import &#123; Provider &#125; from 'mobx-react';import &#123; createStores &#125; from 'src/stores/createStores';const stores = createStores();ReactDOM.render( &lt;Provider &#123;...stores&#125;&gt; &lt;App /&gt; &lt;/Provider&gt;, document.getElementById('root') as HTMLElement);... 이제 스토어를 사용하면 됩니다. 컴포넌트 만들기 src/view/containers/Counter/index.tsx 파일을 생성합니다. 예제 이므로 components 폴더는 사용하지 않습니다. 123456789101112131415161718192021222324import * as React from 'react';import &#123; observer, inject &#125; from 'mobx-react';import &#123; CounterStore &#125; from 'src/stores/CounterStore';import &#123; COUNTER_STORE &#125; from 'src/constant/stores.const';@inject( COUNTER_STORE)@observerclass Counter extends React.Component&lt;&#123;&#125;, &#123;&#125;&gt; &#123; public render() &#123; const &#123; counter, increment, decrement &#125; = (this.props[COUNTER_STORE] as CounterStore); return ( &lt;div&gt; &lt;h2&gt;Counter : &#123;counter&#125;&lt;/h2&gt; &lt;button onClick=&#123;increment&#125;&gt;Increment&lt;/button&gt; &lt;button onClick=&#123;decrement&#125;&gt;Decrement&lt;/button&gt; &lt;/div&gt; ); &#125;&#125;export default Counter; 데코 @inject : 컴포넌트의 props에 스토어 주입 @observer: 스토어의 변화를 관찰하여 업데이트시 결과 반영 참고 mobx 공식 저장소 결과","categories":[{"name":"Frontend","slug":"Frontend","permalink":"https://devtory.github.io/categories/Frontend/"},{"name":"React","slug":"Frontend/React","permalink":"https://devtory.github.io/categories/Frontend/React/"}],"tags":[{"name":"React","slug":"React","permalink":"https://devtory.github.io/tags/React/"},{"name":"Mobx","slug":"Mobx","permalink":"https://devtory.github.io/tags/Mobx/"}]},{"title":"ReactNative(Expo)에 Typescript 적용","slug":"ReactNative(Expo)에 Typescript 적용","date":"2018-11-11T08:41:47.000Z","updated":"2018-11-22T02:16:13.208Z","comments":true,"path":"2018/11/11/ReactNative(Expo)에 Typescript 적용/","link":"","permalink":"https://devtory.github.io/2018/11/11/ReactNative(Expo)에 Typescript 적용/","excerpt":"","text":"ReactNative(Expo)에 Typescript 적용 정리, 기록을 위해 작성된 글입니다. 환경 Windows 10 Node.js 8.11.2 Expo CLI 2.x (Ver 2.x → CRNA 기능 통합, XDE 웹기반으로 변경) Expo CLI, Typescirpt 설치 1$ yarn global expo-cli 프로젝트 생성 1$ expo init &lt;Project Name&gt; ※ \"blank app\" 선택 Typescript관련 패키지 설치 123$ cd &lt;Project Name&gt;$ yarn add typescript react-native-typescript-transformer tslib$ yarn add @types/react @types/react-native @types/expo @types/expo__vector-icons --dev tsconfig.json 파일 생성 &amp; 수정 1$ ./node_modules/.bin/tsc.cmd --init ※ \"tsconfig.json\"파일 생성 1234567891011121314151617181920&#123; \"compilerOptions\": &#123; \"target\": \"es2017\", \"module\": \"es2015\", \"lib\": [ \"es2017\" ], \"jsx\": \"react-native\", \"sourceMap\": true, \"noEmit\": true, \"importHelpers\": true, \"moduleResolution\": \"node\", \"allowSyntheticDefaultImports\": true, \"experimentalDecorators\": true, \"emitDecoratorMetadata\": true &#125;, \"exclude\": [ \"node_modules\" ]&#125; tslint.json 파일 생성 세부 설정은 tslint 공식홈 참조 12345678910&#123; \"extends\": [\"tslint:recommended\", \"tslint-react\", \"tslint-config-prettier\"], \"linterOptions\": &#123; \"exclude\": [ \"config/**/*.js\", \"node_modules/**/*.ts\", \"coverage/lcov-report/*.js\" ] &#125;&#125; app.json파일 수정 12345678&#123; \"expo\": &#123; \"packagerOpts\": &#123; \"sourceExts\": [\"ts\", \"tsx\"], \"transformer\": \"node_modules/react-native-typescript-transformer/index.js\" &#125; &#125;&#125; 파일명 변경 12$ mkdir src$ mv App.js src/App.tsx App.ts 파일생성 12import App from './src/App';export default App; 실행 1$ expo start 결과","categories":[{"name":"Mobile","slug":"Mobile","permalink":"https://devtory.github.io/categories/Mobile/"},{"name":"ReactNative","slug":"Mobile/ReactNative","permalink":"https://devtory.github.io/categories/Mobile/ReactNative/"}],"tags":[{"name":"ReactNative","slug":"ReactNative","permalink":"https://devtory.github.io/tags/ReactNative/"},{"name":"Expo","slug":"Expo","permalink":"https://devtory.github.io/tags/Expo/"},{"name":"Typescript","slug":"Typescript","permalink":"https://devtory.github.io/tags/Typescript/"}]},{"title":"Hello World","slug":"hello-world","date":"2018-11-11T08:34:39.247Z","updated":"2018-11-15T02:59:05.875Z","comments":true,"path":"2018/11/11/hello-world/","link":"","permalink":"https://devtory.github.io/2018/11/11/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}]}