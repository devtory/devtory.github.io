<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[ReactNative(Expo)에 Mobx(ES6) 적용하기]]></title>
    <url>%2F2018%2F11%2F27%2FReactNative(Expo)%EC%97%90%20Mobx(ES6)%20%EC%A0%81%EC%9A%A9%ED%95%98%EA%B8%B0%2F</url>
    <content type="text"><![CDATA[ReactNative(Expo)에 Mobx(ES6) 적용하기 목표 : Expo CLI를 통해 생성된 ES6 프로젝트에 Mobx 적용하기 Why? ES6 지금까지 까지 Typescript를 사용했지만, 한가지 아쉬운점은 레퍼런스가 부족하다는점 입니다. 다행히 Server와 Web까지는 1~2년 전보다 생태계가 급격히 발전하여 좋은 레퍼런스가 생겨나고 있어 Typescript를 적용하기 좋은 환경이 갖추어졌습니다. 하지만 Expo에서 Typescript에 관한 레퍼런스가 매우 적어, 이번 토이 프로젝트는 Tyepscript를 고집하지 않고 ES6를 사용 하기로 했습니다. 추후 조금더 생태계가 조성되면 Typescript를 사용해야 겠습니다. 환경 123Windows 10Node.js 8.11.2Expo CLI 2.X (Ver 2.x → CRNA 기능 통합, XDE 웹기반으로 변경) Expo CLI 설치 1$ yarn global expo-cli ※ 또는 npm isntall -g expo-cli 프로젝트 생성 1$ expo init &lt;Project Name&gt; ※ "blank app" 선택 MobX 설치 12$ cd &lt;Project Name&gt;$ yarn add mobx mobx-react 데코레이터 관련 Babel 플러그인 설치 1$ yarn add @babel/plugin-proposal-decorators @babel/plugin-proposal-class-properties --dev babel.config.js 파일에 플러그인 적용 12345678910module.exports = function(api) &#123; api.cache(true); return &#123; presets: ['babel-preset-expo'], plugins: [ ['@babel/plugin-proposal-decorators', &#123; legacy: true &#125;], ['@babel/plugin-proposal-class-properties', &#123; "loose": true&#125;] ] &#125;;&#125;; 단순한 카운터를 만들기 위해 카운터 스토어를 생성합니다. 엔트리파일 변경 123$ mkdir src$ mv App.js ./src$ touch App.js App.js 파일변경 12import App from './src/App';export default App; Store 생성 src/stores폴더 생성 src/stores/CounterStores.ts 파일 생성 후 아래 내용을 입력 합니다. 12345678910111213141516171819import &#123; observable, action &#125; from 'mobx';export class CounterStore &#123; @observable counter; constructor() &#123; this.counter = 0; &#125; @action increase = () =&gt; &#123; this.counter++; &#125; @action decrease = () =&gt; &#123; this.counter--; &#125;&#125; src/stores/createStores.js 파일 생성 후 아래 내용을 입력 합니다. 123456789import &#123; CounterStore &#125; from './CounterStore';export function createStores() &#123; const counterStore = new CounterStore(); // CounterStore 객체 생성 return &#123; counterStore, &#125;;&#125; src/App.js 파일에 Store를 등록합니다. 1234567891011121314151617181920...import &#123; Provider &#125; from 'mobx-react';import &#123; createStores &#125; from './stores/createStores';import Counter from './Components/Counter';const stores = createStores();export default class App extends React.Component &#123; render() &#123; return ( &lt;Provider &#123;...stores&#125;&gt; &lt;View style=&#123;styles.container&#125;&gt; &lt;Counter /&gt; &lt;/View&gt; &lt;/Provider&gt; ); &#125;&#125;... src/components/Counter/index.js 파일을 생성하여 Store를 사용 테스트를 합니다. 12345678910111213141516171819202122232425import React from 'react';import &#123; Text, View, Button &#125; from 'react-native';import &#123; observer, inject &#125; from 'mobx-react';@inject('counterStore')@observerexport default class App extends React.Component &#123; render() &#123; const &#123; counter, increase, decrease&#125; = this.props.counterStore; return ( &lt;View&gt; &lt;Text&gt;&#123;counter&#125;&lt;/Text&gt; &lt;Button onPress=&#123;increase&#125; title="Increase" /&gt; &lt;Button onPress=&#123;decrease&#125; title="Decrease" /&gt; &lt;/View&gt; ); &#125;&#125;]]></content>
      <categories>
        <category>Mobile</category>
        <category>ReactNative</category>
      </categories>
      <tags>
        <tag>Mobx</tag>
        <tag>ReactNative</tag>
        <tag>ES6</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Promise와 Observable 차이]]></title>
    <url>%2F2018%2F11%2F23%2FPromise%EC%99%80%20Observable%20%EC%B0%A8%EC%9D%B4%2F</url>
    <content type="text"><![CDATA[Promise와 Observable 차이Promise resolve 또는 reject 한개의 값만 반환 12345678910111213141516const promiseError = new Promise(function(resolve, reject) &#123; resolve(10); // 값 전달 reject('error'); // 에러 전달&#125;); promiseError.then( function(value) &#123; console.log(value); &#125;, function(error) &#123; console.error(error); &#125;); &gt;&gt;&gt;10 // resolve(10) 실행후 종료되므로 error는 발생하지 않음 Promise는 중간에 취소 할 수 없음 만약 http request를 통해 검색 기능 구현시 아래와 같이 모든 키보드 입력 검색 love 검색시 l, lo, lov, love 4가지 모두 검색 요청 Async/Await 사용 가능 Observable 이벤트 또는 데이터 스트림과 같이 연속 데이터 반환 123456789101112131415161718192021222324const &#123; Observable &#125; = require ('rxjs'); const observableCreated$ = Observable.create(function(observer) &#123; try &#123; observer.next(1); // 다음에 전달할 값 또는 이벤트 발행 observer.next(2); throw("throw err test"); &#125; catch (err) &#123; observer.error(err); // 에러나 예외를 받고, 구독 종료 &#125; finally &#123; observer.complete(); // 정상 적으로 구독 완료시 호출, 구독 조요 &#125;&#125;); observableCreated$.subscribe( function next(item) &#123; console.log(item); &#125;, function error(err) &#123; console.log("error: " + err); &#125;, function complete() &#123; console.log('complete'); &#125;);&gt;&gt;&gt;12error: throw err test 중간에 취소 할 수 있음 만약 http request를 통해 검색 기능 구현시 필요없는 값은 삭제가능 love 검색시 l, lo, lov 값 삭제 후 love만 실행 123456this.term.valueChanges .debounceTime(400) // 400밀초 미만의 출력 삭제 .distinctUntilChanged() .subscribe(searchTerm =&gt; &#123; ... &#125;);]]></content>
      <categories>
        <category>Javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
        <tag>promise</tag>
        <tag>observable</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[React Typescript 프로젝트에 MobX 적용]]></title>
    <url>%2F2018%2F11%2F13%2FReact%20Typescript%20%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8%EC%97%90%20MobX%20%EC%A0%81%EC%9A%A9%2F</url>
    <content type="text"><![CDATA[React Typescript 프로젝트에 MobX 적용 목표 : Typescript로 구성된 React 프로젝트에 MobX를 적용하고 Store 기반의 라우터 사용 환경 123Windows 10Node.js 8.11.2CRA 2.1.1 MobX ? MobX는 Redux와 함께 가장 인기있는 상태관리 라이브러리 중 하나 입니다. 공식홈페이지에서는 Mobx를 매우 단순하고 확장성이 좋다고 소개 하고 있습니다. Redux와 비교해 볼때 충분히 동의할만한 내용입니다. Mobx는 React가 상태를 저장하고 업데이트 하는 방식과 유사한 메커니즘을 제공하기 때문에 React와의 조합이 매우 강력하다고 합니다. Mobx에 대한 세부 사항은 공식문서를 보실것을 추천드립니다. (정리가 매우 잘 되어있습니다.) 먼저, 프로젝트를 생성 후 Mobx를 적용해 보도록 하겠습니다. crea-react-app으로 Typescript 프로젝트 생성하기 12$ npm install -g create-react-app$ create-react-app &lt;프로젝트명&gt; --scripts-version=react-scripts-ts mobx, react-router 설치 12$ cd &lt;프로젝트명&gt;$ yarn add mobx mobx-react mobx패키지는 타입정의파일(d.ts)이 내장되어있어 별도 설치가 필요 없습니다. 데코레이터를 사용하기 위해 tsconfig.json 파일에 아래내용 추가 1234567&#123; "compilerOptions": &#123; ..., "experimentalDecorators": true &#125;, ...&#125; (선택사항) tslint.json에 귀찮은 옵션을 해제 합니다 “ordered-imports”는 모듈 import시 A, B, C 순으로 호출하지 않을 경우 경고를 발생시켜 줍니다. 이 옵션은 아래 내용을 추가하여 해제 하겠습니다. 1234567&#123; ... "rules": &#123; "ordered-imports": false &#125; ...&#125; 디렉토리 구조 디렉토리 구조에 대한 대한 표준은 없습니다. 여러가지 유형 중 저는 아래와 같은 구조를 선호 합니다. 1234567+-- src +-- stores ※ 여러개의 store 생성 가능 +-- constant ※ props로 전달되는 store 객체의 Key값으로 사용될 상수 +-- view +-- containers ※ store가 주입(inject)되는 컴포넌트 +-- components ※ props를 통해 container로부터 store데이터를 전달받음 (권장사항으로 component에서 직접 store를 주입해도 상관없습니다) 단순한 카운터를 예를 들어 스토어와 아래 컴포넌트를 생성해 보겠습니다. Store 생성 src/stores/CounterStore.ts 파일 생성 후 아래 내용을 입력 합니다. 123456789101112131415161718import &#123; observable, action &#125; from 'mobx';export class CounterStore &#123; @observable public counter: number; constructor() &#123; this.counter = 0; &#125; @action public increase = () =&gt; &#123; this.counter++; &#125; @action public decrease = () =&gt; &#123; this.counter--; &#125;&#125; 데코레이터 설명 @observable : observer로 관찰 가능해짐, 즉 값이 변경되면 observer에게 알림. @action : @observable값을 변경 시키는 경우 사용 Store를 구분하기 위한 키(상수) 등록 src/constant/stores.const.ts파일 생성후 아래 내용을 입력합니다. 언제나 그렇듯 정해진 형식은 없으니 나름의 기준을 정해 이름을 정하시면 됩니다. 1export const COUNTER_STORE = 'counter_store'; Store를 생성하기 위한 함수를 만듭니다 src/stores/createStores.ts파일 생성후 아래 내용을 입력 합니다. 이후 추가되는 Store는 모두 이곳에 작성을 합니다. 12345678910import &#123; CounterStore &#125; from './CounterStore';import &#123; COUNTER_STORE &#125; from 'src/constant/stores.const';export function createStores() &#123; const counterStore = new CounterStore(); // CounterStore 객체 생성 return &#123; [COUNTER_STORE]: counterStore, &#125;;&#125; Store 등록 src/index.tsx파일을 아래와 같이 수정합니다. 123456789101112131415...import &#123; Provider &#125; from 'mobx-react';import &#123; createStores &#125; from 'src/stores/createStores';const stores = createStores();ReactDOM.render( &lt;Provider &#123;...stores&#125;&gt; &lt;App /&gt; &lt;/Provider&gt;, document.getElementById('root') as HTMLElement);... 이제 스토어를 사용하면 됩니다. 컴포넌트 만들기 src/view/containers/Counter/index.tsx 파일을 생성합니다. 예제 이므로 components 폴더는 사용하지 않습니다. 123456789101112131415161718192021222324import * as React from 'react';import &#123; observer, inject &#125; from 'mobx-react';import &#123; CounterStore &#125; from 'src/stores/CounterStore';import &#123; COUNTER_STORE &#125; from 'src/constant/stores.const';@inject( COUNTER_STORE)@observerclass Counter extends React.Component&lt;&#123;&#125;, &#123;&#125;&gt; &#123; public render() &#123; const &#123; counter, increase, decrease &#125; = (this.props[COUNTER_STORE] as CounterStore); return ( &lt;div&gt; &lt;h2&gt;Counter : &#123;counter&#125;&lt;/h2&gt; &lt;button onClick=&#123;increase&#125;&gt;Increase&lt;/button&gt; &lt;button onClick=&#123;decrease&#125;&gt;Decrease&lt;/button&gt; &lt;/div&gt; ); &#125;&#125;export default Counter; 데코 @inject : 컴포넌트의 props에 스토어 주입 @observer: 스토어의 변화를 관찰하여 업데이트시 결과 반영 참고 mobx 공식 저장소 결과]]></content>
      <categories>
        <category>Frontend</category>
        <category>React</category>
      </categories>
      <tags>
        <tag>React</tag>
        <tag>Mobx</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[ReactNative(Expo)에 Typescript 적용]]></title>
    <url>%2F2018%2F11%2F11%2FReactNative(Expo)%EC%97%90%20Typescript%20%EC%A0%81%EC%9A%A9%2F</url>
    <content type="text"><![CDATA[ReactNative(Expo)에 Typescript 적용 목표 : Expo CLI를 통해 생성된 프로젝트에 Typescript 적용 환경 123Windows 10Node.js 8.11.2Expo CLI 2.X (Ver 2.x → CRNA 기능 통합, XDE 웹기반으로 변경) Expo CLI 설치 1$ yarn global expo-cli ※ 또는 npm isntall -g expo-cli 프로젝트 생성 1$ expo init &lt;Project Name&gt; ※ "blank app" 선택 Typescript관련 패키지 설치 123$ cd &lt;Project Name&gt;$ yarn add typescript react-native-typescript-transformer tslib$ yarn add @types/react @types/react-native @types/expo @types/expo__vector-icons --dev tsconfig.json 파일 생성 &amp; 수정 1$ ./node_modules/.bin/tsc.cmd --init ※ "tsconfig.json"파일 생성 1234567891011121314151617181920&#123; "compilerOptions": &#123; "target": "es2017", "module": "es2015", "lib": [ "es2017" ], "jsx": "react-native", "sourceMap": true, "noEmit": true, "importHelpers": true, "moduleResolution": "node", "allowSyntheticDefaultImports": true, "experimentalDecorators": true, "emitDecoratorMetadata": true &#125;, "exclude": [ "node_modules" ]&#125; tslint.json 파일 생성 세부 설정은 tslint 공식홈 참조 12345678910&#123; "extends": ["tslint:recommended", "tslint-react", "tslint-config-prettier"], "linterOptions": &#123; "exclude": [ "config/**/*.js", "node_modules/**/*.ts", "coverage/lcov-report/*.js" ] &#125;&#125; app.json파일 수정 12345678&#123; "expo": &#123; "packagerOpts": &#123; "sourceExts": ["ts", "tsx"], "transformer": "node_modules/react-native-typescript-transformer/index.js" &#125; &#125;&#125; 파일명 변경 12$ mkdir src$ mv App.js src/App.tsx App.ts 파일생성 12import App from './src/App';export default App; 실행 스마트 폰에 Expo앱 설치후 아래 명령어 입력 1$ expo start ※ 스마트폰에서 생성된 QR코드 스캔 결과]]></content>
      <categories>
        <category>Mobile</category>
        <category>ReactNative</category>
      </categories>
      <tags>
        <tag>ReactNative</tag>
        <tag>Expo</tag>
        <tag>Typescript</tag>
      </tags>
  </entry>
</search>
