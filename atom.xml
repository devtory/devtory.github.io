<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>unknownerror</title>
  
  <subtitle>Summary</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://celtonrd8.github.io/"/>
  <updated>2018-11-15T02:54:25.806Z</updated>
  <id>https://celtonrd8.github.io/</id>
  
  <author>
    <name>celtonrd8</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>React Typescript 프로젝트에 MobX 적용</title>
    <link href="https://celtonrd8.github.io/2018/11/13/ApplyReactTsToMobx/"/>
    <id>https://celtonrd8.github.io/2018/11/13/ApplyReactTsToMobx/</id>
    <published>2018-11-13T06:06:19.000Z</published>
    <updated>2018-11-15T02:54:25.806Z</updated>
    
    <content type="html"><![CDATA[<h2 id="React-Typescript-프로젝트에-MobX-적용"><a href="#React-Typescript-프로젝트에-MobX-적용" class="headerlink" title="React Typescript 프로젝트에 MobX 적용"></a>React Typescript 프로젝트에 MobX 적용</h2><blockquote><p>목표 : Typescript로 구성된 React 프로젝트에 MobX를 적용하고 Store 기반의 라우터 사용</p></blockquote><ul><li><p>환경</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Windows 10</span><br><span class="line">Node.js 8.11.2</span><br><span class="line">CRA 2.1.1</span><br></pre></td></tr></table></figure></li><li><p>MobX란?</p><ul><li><p>MobX는 Redux와 함께 가장 인기있는 상태관리 라이브러리 중 하나입니다.</p></li><li><p>공식홈페이지에서는 Mobx를 매우 단순하고 확장성이 좋다고 소개 하고 있습니다. Redux와 비교해 볼때 충분히 동의할만한 내용입니다.</p></li><li><p>또한 Mobx는 React가 상태를 저장하고 업데이트 하는 방식과 유사한 메커니즘을 제공하기 때문에  React와의 조합이 매우 강력하다고 합니다.</p></li><li><p>Mobx에 대한 자세한 내용은 공식문서가 잘 정리 되어 있어 공식문서를 추천드립니다. </p></li></ul></li></ul><blockquote><p>먼저, 프로젝트를 생성 후 Mobx를 적용해 보도록 하겠습니다.</p></blockquote><ul><li><p>crea-react-app으로 Typescript 프로젝트 생성하기</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> npm install -g create-react-app</span><br><span class="line"><span class="meta">$</span> create-react-app &lt;프로젝트명&gt; --scripts-version=react-scripts-ts</span><br></pre></td></tr></table></figure></li><li><p>mobx, react-router 설치</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> cd &lt;프로젝트명&gt;</span><br><span class="line"><span class="meta">$</span> yarn add mobx mobx-react</span><br></pre></td></tr></table></figure><ul><li>mobx패키지는 타입정의파일(d.ts)이 내장되어있어 별도 설치가 필요 없습니다.</li></ul></li><li><p>데코레이터를 사용하기 위해 tsconfig.json 파일에 아래내용 추가</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">"compilerOptions"</span>: &#123;</span><br><span class="line">...,</span><br><span class="line">"experimentalDecorators": true</span><br><span class="line">&#125;,</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>(선택사항) tslint.json에 귀찮은 옵션을 해제 합니다</p><ul><li>“ordered-imports”는 모듈 import시 A, B, C 순으로 호출하지 않을 경우 경고를 발생시켜 줍니다. 이 옵션은 아래 내용을 추가하여 해제 하겠습니다.</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  ...</span><br><span class="line">"rules": &#123;</span><br><span class="line">    "ordered-imports": false</span><br><span class="line">  &#125;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>디렉토리 구조</p><ul><li>디렉토리 구조에 대한 대한 표준은 없습니다.</li><li>여러가지 유형 중 저는 아래와 같은 구조를 선호 합니다.</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">+-- src</span><br><span class="line">   +-- stores        ※ 여러개의 store 생성 가능</span><br><span class="line">   +-- constant      ※ props로 전달되는 store 객체의 Key값으로 사용될 상수</span><br><span class="line">   +-- view</span><br><span class="line">       +-- containers   ※ store가 주입(inject)되는 컴포넌트</span><br><span class="line">       +-- components   ※ props를 통해 container로부터  store데이터를 전달받음</span><br><span class="line">                          (권장사항으로 component에서 직접 store를 주입해도 상관없습니다)</span><br></pre></td></tr></table></figure></li></ul><blockquote><p>단순한 카운터를 예를 들어 스토어와 아래 컴포넌트를 생성해 보겠습니다.</p></blockquote><ul><li><p>Store 생성</p><ul><li><p>src/stores/CounterStore.ts 파일 생성 후 아래 내용을 입력 합니다.</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; observable, action &#125; <span class="keyword">from</span> <span class="string">'mobx'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> CounterStore &#123;</span><br><span class="line">    <span class="meta">@observable</span> <span class="keyword">public</span> counter: <span class="built_in">number</span>;</span><br><span class="line">    <span class="keyword">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.counter = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@action</span></span><br><span class="line">    <span class="keyword">public</span> increment = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.counter++;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@action</span></span><br><span class="line">    <span class="keyword">public</span> decrement = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.counter--;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>데코레이터 (세부내용은 추후 포스팅에서..)</p><ul><li><p>“@observable” 데코레이터를 사용한 값이 변경되면 이를 감자 하여 상태를 업데이트 한다.</p></li><li><p>“@action” 데코레이터는 “@observable”값을 변경 시키는 경우 사용한다.</p></li></ul></li></ul></li><li><p>Store를 구분하기 위한 키(상수) 등록</p><ul><li><p>src/constant/stores.const.ts파일 생성후 아래 내용을 입력합니다.</p></li><li><p>언제나 그렇듯 정해진 형식은 없으니 나름의 기준을 정해 이름을 정하시면 됩니다.</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> COUNTER_STORE = <span class="string">'counter_store'</span>;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>Store를 생성하기 위한 함수를 만듭니다</p><ul><li><p>src/stores/createStores.ts파일 생성후 아래 내용을 입력 합니다.</p></li><li><p>이후 추가되는 Store는 모두 이곳에 작성을 합니다.</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; CounterStore &#125; <span class="keyword">from</span> <span class="string">'./CounterStore'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; COUNTER_STORE &#125; <span class="keyword">from</span> <span class="string">'src/constant/stores.const'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">createStores</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> counterStore = <span class="keyword">new</span> CounterStore(); <span class="comment">// CounterStore 객체 생성</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        [COUNTER_STORE]: counterStore,</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>Store 등록</p><ul><li><p>src/index.tsx파일을 아래와 같이 수정합니다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"></span><br><span class="line">import &#123; Provider &#125; from &apos;mobx-react&apos;;</span><br><span class="line">import &#123; createStores &#125; from &apos;src/stores/createStores&apos;;</span><br><span class="line"></span><br><span class="line">const stores = createStores();</span><br><span class="line"></span><br><span class="line">ReactDOM.render(</span><br><span class="line">  &lt;Provider &#123;...stores&#125;&gt;</span><br><span class="line">    &lt;App /&gt;</span><br><span class="line">  &lt;/Provider&gt;,</span><br><span class="line">  document.getElementById(&apos;root&apos;) as HTMLElement</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">...</span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ul><blockquote><p>이제 스토어를 사용하면 됩니다.</p></blockquote><ul><li><p>컴포넌트 만들기</p><ul><li><p>src/view/containers/Counter/index.tsx 파일을 생성합니다.</p></li><li><p>예제 이므로 components 폴더는 사용하지 않습니다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">import * as React from &apos;react&apos;;</span><br><span class="line">import &#123; observer, inject &#125; from &apos;mobx-react&apos;;</span><br><span class="line"></span><br><span class="line">import &#123; CounterStore &#125; from &apos;src/stores/CounterStore&apos;;</span><br><span class="line">import &#123; COUNTER_STORE &#125; from &apos;src/constant/stores.const&apos;;</span><br><span class="line"></span><br><span class="line">@inject(</span><br><span class="line">  COUNTER_STORE</span><br><span class="line">)</span><br><span class="line">@observer</span><br><span class="line">class Counter extends React.Component&lt;&#123;&#125;, &#123;&#125;&gt; &#123;</span><br><span class="line">  public render() &#123;</span><br><span class="line">    const &#123; counter, increment, decrement &#125; = (this.props[COUNTER_STORE] as CounterStore);</span><br><span class="line">    return (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;h2&gt;Counter : &#123;counter&#125;&lt;/h2&gt;</span><br><span class="line">        &lt;button onClick=&#123;increment&#125;&gt;Increment&lt;/button&gt;</span><br><span class="line">        &lt;button onClick=&#123;decrement&#125;&gt;Decrement&lt;/button&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default Counter;</span><br></pre></td></tr></table></figure><ul><li><p>데코레이터 (세부내용은 추후 포스팅에서..)</p><ul><li><p>“@inject” : 스토어를 해당 컴포넌트의 props에 주입합니다.</p></li><li><p>“@observer”: 스토어의 변화를 관찰하여 업데이트시 결과를 반영합니다.</p></li></ul></li></ul></li></ul></li></ul><ul><li>참고<ul><li><a href="https://github.com/mobxjs/mobx" target="_blank" rel="noopener">mobx 공식 저장소</a></li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;React-Typescript-프로젝트에-MobX-적용&quot;&gt;&lt;a href=&quot;#React-Typescript-프로젝트에-MobX-적용&quot; class=&quot;headerlink&quot; title=&quot;React Typescript 프로젝트에 MobX 적용&quot;&gt;
      
    
    </summary>
    
      <category term="Frontend" scheme="https://celtonrd8.github.io/categories/Frontend/"/>
    
      <category term="React" scheme="https://celtonrd8.github.io/categories/Frontend/React/"/>
    
    
      <category term="React" scheme="https://celtonrd8.github.io/tags/React/"/>
    
      <category term="Mobx" scheme="https://celtonrd8.github.io/tags/Mobx/"/>
    
  </entry>
  
  <entry>
    <title>React Typescript 프로젝트에 MobX 적용</title>
    <link href="https://celtonrd8.github.io/2018/11/13/React%20Typescript%20%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8%EC%97%90%20MobX%20%EC%A0%81%EC%9A%A9/"/>
    <id>https://celtonrd8.github.io/2018/11/13/React Typescript 프로젝트에 MobX 적용/</id>
    <published>2018-11-13T06:06:19.000Z</published>
    <updated>2018-11-15T02:55:07.218Z</updated>
    
    <content type="html"><![CDATA[<h2 id="React-Typescript-프로젝트에-MobX-적용"><a href="#React-Typescript-프로젝트에-MobX-적용" class="headerlink" title="React Typescript 프로젝트에 MobX 적용"></a>React Typescript 프로젝트에 MobX 적용</h2><blockquote><p>목표 : Typescript로 구성된 React 프로젝트에 MobX를 적용하고 Store 기반의 라우터 사용</p></blockquote><ul><li><p>환경</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Windows 10</span><br><span class="line">Node.js 8.11.2</span><br><span class="line">CRA 2.1.1</span><br></pre></td></tr></table></figure></li><li><p>MobX란?</p><ul><li><p>MobX는 Redux와 함께 가장 인기있는 상태관리 라이브러리 중 하나입니다.</p></li><li><p>공식홈페이지에서는 Mobx를 매우 단순하고 확장성이 좋다고 소개 하고 있습니다. Redux와 비교해 볼때 충분히 동의할만한 내용입니다.</p></li><li><p>또한 Mobx는 React가 상태를 저장하고 업데이트 하는 방식과 유사한 메커니즘을 제공하기 때문에  React와의 조합이 매우 강력하다고 합니다.</p></li><li><p>Mobx에 대한 자세한 내용은 공식문서가 잘 정리 되어 있어 공식문서를 추천드립니다. </p></li></ul></li></ul><blockquote><p>먼저, 프로젝트를 생성 후 Mobx를 적용해 보도록 하겠습니다.</p></blockquote><ul><li><p>crea-react-app으로 Typescript 프로젝트 생성하기</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> npm install -g create-react-app</span><br><span class="line"><span class="meta">$</span> create-react-app &lt;프로젝트명&gt; --scripts-version=react-scripts-ts</span><br></pre></td></tr></table></figure></li><li><p>mobx, react-router 설치</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> cd &lt;프로젝트명&gt;</span><br><span class="line"><span class="meta">$</span> yarn add mobx mobx-react</span><br></pre></td></tr></table></figure><ul><li>mobx패키지는 타입정의파일(d.ts)이 내장되어있어 별도 설치가 필요 없습니다.</li></ul></li><li><p>데코레이터를 사용하기 위해 tsconfig.json 파일에 아래내용 추가</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">"compilerOptions"</span>: &#123;</span><br><span class="line">...,</span><br><span class="line">"experimentalDecorators": true</span><br><span class="line">&#125;,</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>(선택사항) tslint.json에 귀찮은 옵션을 해제 합니다</p><ul><li>“ordered-imports”는 모듈 import시 A, B, C 순으로 호출하지 않을 경우 경고를 발생시켜 줍니다. 이 옵션은 아래 내용을 추가하여 해제 하겠습니다.</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  ...</span><br><span class="line">"rules": &#123;</span><br><span class="line">    "ordered-imports": false</span><br><span class="line">  &#125;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>디렉토리 구조</p><ul><li>디렉토리 구조에 대한 대한 표준은 없습니다.</li><li>여러가지 유형 중 저는 아래와 같은 구조를 선호 합니다.</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">+-- src</span><br><span class="line">   +-- stores        ※ 여러개의 store 생성 가능</span><br><span class="line">   +-- constant      ※ props로 전달되는 store 객체의 Key값으로 사용될 상수</span><br><span class="line">   +-- view</span><br><span class="line">       +-- containers   ※ store가 주입(inject)되는 컴포넌트</span><br><span class="line">       +-- components   ※ props를 통해 container로부터  store데이터를 전달받음</span><br><span class="line">                          (권장사항으로 component에서 직접 store를 주입해도 상관없습니다)</span><br></pre></td></tr></table></figure></li></ul><blockquote><p>단순한 카운터를 예를 들어 스토어와 아래 컴포넌트를 생성해 보겠습니다.</p></blockquote><ul><li><p>Store 생성</p><ul><li><p>src/stores/CounterStore.ts 파일 생성 후 아래 내용을 입력 합니다.</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; observable, action &#125; <span class="keyword">from</span> <span class="string">'mobx'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> CounterStore &#123;</span><br><span class="line">    <span class="meta">@observable</span> <span class="keyword">public</span> counter: <span class="built_in">number</span>;</span><br><span class="line">    <span class="keyword">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.counter = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@action</span></span><br><span class="line">    <span class="keyword">public</span> increment = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.counter++;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@action</span></span><br><span class="line">    <span class="keyword">public</span> decrement = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.counter--;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>데코레이터 (세부내용은 추후 포스팅에서..)</p><ul><li><p>“@observable” 데코레이터를 사용한 값이 변경되면 이를 감자 하여 상태를 업데이트 한다.</p></li><li><p>“@action” 데코레이터는 “@observable”값을 변경 시키는 경우 사용한다.</p></li></ul></li></ul></li><li><p>Store를 구분하기 위한 키(상수) 등록</p><ul><li><p>src/constant/stores.const.ts파일 생성후 아래 내용을 입력합니다.</p></li><li><p>언제나 그렇듯 정해진 형식은 없으니 나름의 기준을 정해 이름을 정하시면 됩니다.</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> COUNTER_STORE = <span class="string">'counter_store'</span>;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>Store를 생성하기 위한 함수를 만듭니다</p><ul><li><p>src/stores/createStores.ts파일 생성후 아래 내용을 입력 합니다.</p></li><li><p>이후 추가되는 Store는 모두 이곳에 작성을 합니다.</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; CounterStore &#125; <span class="keyword">from</span> <span class="string">'./CounterStore'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; COUNTER_STORE &#125; <span class="keyword">from</span> <span class="string">'src/constant/stores.const'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">createStores</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> counterStore = <span class="keyword">new</span> CounterStore(); <span class="comment">// CounterStore 객체 생성</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        [COUNTER_STORE]: counterStore,</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>Store 등록</p><ul><li><p>src/index.tsx파일을 아래와 같이 수정합니다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"></span><br><span class="line">import &#123; Provider &#125; from &apos;mobx-react&apos;;</span><br><span class="line">import &#123; createStores &#125; from &apos;src/stores/createStores&apos;;</span><br><span class="line"></span><br><span class="line">const stores = createStores();</span><br><span class="line"></span><br><span class="line">ReactDOM.render(</span><br><span class="line">  &lt;Provider &#123;...stores&#125;&gt;</span><br><span class="line">    &lt;App /&gt;</span><br><span class="line">  &lt;/Provider&gt;,</span><br><span class="line">  document.getElementById(&apos;root&apos;) as HTMLElement</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">...</span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ul><blockquote><p>이제 스토어를 사용하면 됩니다.</p></blockquote><ul><li><p>컴포넌트 만들기</p><ul><li><p>src/view/containers/Counter/index.tsx 파일을 생성합니다.</p></li><li><p>예제 이므로 components 폴더는 사용하지 않습니다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">import * as React from &apos;react&apos;;</span><br><span class="line">import &#123; observer, inject &#125; from &apos;mobx-react&apos;;</span><br><span class="line"></span><br><span class="line">import &#123; CounterStore &#125; from &apos;src/stores/CounterStore&apos;;</span><br><span class="line">import &#123; COUNTER_STORE &#125; from &apos;src/constant/stores.const&apos;;</span><br><span class="line"></span><br><span class="line">@inject(</span><br><span class="line">  COUNTER_STORE</span><br><span class="line">)</span><br><span class="line">@observer</span><br><span class="line">class Counter extends React.Component&lt;&#123;&#125;, &#123;&#125;&gt; &#123;</span><br><span class="line">  public render() &#123;</span><br><span class="line">    const &#123; counter, increment, decrement &#125; = (this.props[COUNTER_STORE] as CounterStore);</span><br><span class="line">    return (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;h2&gt;Counter : &#123;counter&#125;&lt;/h2&gt;</span><br><span class="line">        &lt;button onClick=&#123;increment&#125;&gt;Increment&lt;/button&gt;</span><br><span class="line">        &lt;button onClick=&#123;decrement&#125;&gt;Decrement&lt;/button&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default Counter;</span><br></pre></td></tr></table></figure><ul><li><p>데코레이터 (세부내용은 추후 포스팅에서..)</p><ul><li><p>“@inject” : 스토어를 해당 컴포넌트의 props에 주입합니다.</p></li><li><p>“@observer”: 스토어의 변화를 관찰하여 업데이트시 결과를 반영합니다.</p></li></ul></li></ul></li></ul></li></ul><ul><li><p>참고</p><ul><li><a href="https://github.com/mobxjs/mobx" target="_blank" rel="noopener">mobx 공식 저장소</a></li></ul></li><li><p>결과</p></li></ul><!-- ![실행화면](result.jpg) --><p><img src="result.gif" title="실행화면"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;React-Typescript-프로젝트에-MobX-적용&quot;&gt;&lt;a href=&quot;#React-Typescript-프로젝트에-MobX-적용&quot; class=&quot;headerlink&quot; title=&quot;React Typescript 프로젝트에 MobX 적용&quot;&gt;
      
    
    </summary>
    
      <category term="Frontend" scheme="https://celtonrd8.github.io/categories/Frontend/"/>
    
      <category term="React" scheme="https://celtonrd8.github.io/categories/Frontend/React/"/>
    
    
      <category term="React" scheme="https://celtonrd8.github.io/tags/React/"/>
    
      <category term="Mobx" scheme="https://celtonrd8.github.io/tags/Mobx/"/>
    
  </entry>
  
  <entry>
    <title>test글2</title>
    <link href="https://celtonrd8.github.io/2018/11/11/test%EA%B8%802/"/>
    <id>https://celtonrd8.github.io/2018/11/11/test글2/</id>
    <published>2018-11-11T08:42:04.000Z</published>
    <updated>2018-11-12T12:30:04.571Z</updated>
    
    <content type="html"><![CDATA[<h2 id="테스트"><a href="#테스트" class="headerlink" title="테스트"></a>테스트</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;테스트&quot;&gt;&lt;a href=&quot;#테스트&quot; class=&quot;headerlink&quot; title=&quot;테스트&quot;&gt;&lt;/a&gt;테스트&lt;/h2&gt;
      
    
    </summary>
    
      <category term="Mobile" scheme="https://celtonrd8.github.io/categories/Mobile/"/>
    
    
      <category term="Tag1" scheme="https://celtonrd8.github.io/tags/Tag1/"/>
    
  </entry>
  
  <entry>
    <title>ReactNative(Expo)에 Typescript 적용</title>
    <link href="https://celtonrd8.github.io/2018/11/11/ReactNative(Expo)%EC%97%90%20Typescript%20%EC%A0%81%EC%9A%A9/"/>
    <id>https://celtonrd8.github.io/2018/11/11/ReactNative(Expo)에 Typescript 적용/</id>
    <published>2018-11-11T08:41:47.000Z</published>
    <updated>2018-11-15T02:51:30.975Z</updated>
    
    <content type="html"><![CDATA[<h2 id="ReactNative-Expo-에-Typescript-적용"><a href="#ReactNative-Expo-에-Typescript-적용" class="headerlink" title="ReactNative(Expo)에 Typescript 적용"></a>ReactNative(Expo)에 Typescript 적용</h2><blockquote><p>정리, 기록을 위해 작성된 글입니다.</p></blockquote><ul><li><p>환경</p><ul><li>Windows 10</li><li>Node.js 8.11.2</li><li>Expo CLI 2.x (Ver 2.x → CRNA 기능 통합, XDE 웹기반으로 변경)</li></ul></li><li><p>Expo CLI, Typescirpt 설치</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> yarn global expo-cli</span><br></pre></td></tr></table></figure></li><li><p>프로젝트 생성 </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> expo init &lt;Project Name&gt;  ※ "blank app" 선택</span><br></pre></td></tr></table></figure></li><li><p>Typescript관련 패키지 설치</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> cd &lt;Project Name&gt;</span><br><span class="line"><span class="meta">$</span> yarn add typescript react-native-typescript-transformer --dev</span><br><span class="line"><span class="meta">$</span> yarn add @types/react @types/react-native @types/expo @types/expo__vector-icons --dev</span><br></pre></td></tr></table></figure><ul><li><p>tsconfig.json 파일 생성 &amp; 수정</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> ./node_modules/.bin/tsc.cmd --init  ※ "tsconfig.json"파일 생성</span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"compilerOptions"</span>: &#123;</span><br><span class="line">      <span class="attr">"target"</span>: <span class="string">"es2017"</span>,</span><br><span class="line">      <span class="attr">"module"</span>: <span class="string">"es2015"</span>,</span><br><span class="line">      <span class="attr">"lib"</span>: [</span><br><span class="line">          <span class="string">"es2017"</span></span><br><span class="line">      ],</span><br><span class="line">      <span class="attr">"jsx"</span>: <span class="string">"react-native"</span>,</span><br><span class="line">      <span class="attr">"sourceMap"</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="attr">"noEmit"</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="attr">"importHelpers"</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="attr">"moduleResolution"</span>: <span class="string">"node"</span>,</span><br><span class="line">      <span class="attr">"allowSyntheticDefaultImports"</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="attr">"experimentalDecorators"</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="attr">"emitDecoratorMetadata"</span>: <span class="literal">true</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"exclude"</span>: [</span><br><span class="line">      <span class="string">"node_modules"</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>tslint.json 파일 생성</p><ul><li><p>react CRA로 생성된 Typescript 프로젝트에 tslint.json파일 복사(아래 내용)</p></li><li><p>세부 설정은 <a href="https://palantir.github.io/tslint/rules/" target="_blank" rel="noopener">tslint 공식홈</a> 참조</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"extends"</span>: [<span class="string">"tslint:recommended"</span>, <span class="string">"tslint-react"</span>, <span class="string">"tslint-config-prettier"</span>],</span><br><span class="line">  <span class="attr">"linterOptions"</span>: &#123;</span><br><span class="line">    <span class="attr">"exclude"</span>: [</span><br><span class="line">      <span class="string">"config/**/*.js"</span>,</span><br><span class="line">      <span class="string">"node_modules/**/*.ts"</span>,</span><br><span class="line">      <span class="string">"coverage/lcov-report/*.js"</span></span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>app.json파일  추가</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"expo"</span>: &#123;</span><br><span class="line">        <span class="attr">"packagerOpts"</span>: &#123;</span><br><span class="line">          <span class="attr">"sourceExts"</span>: [<span class="string">"ts"</span>, <span class="string">"tsx"</span>],</span><br><span class="line">          <span class="attr">"transformer"</span>: <span class="string">"node_modules/react-native-typescript-transformer/index.js"</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>파일명 변경</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> mkdir src</span><br><span class="line"><span class="meta">$</span> mv App.js src/App.tsx</span><br></pre></td></tr></table></figure><ul><li><p>App.ts 파일생성</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="keyword">from</span> <span class="string">'./src/App'</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> App;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>실행</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ expo start</span><br></pre></td></tr></table></figure></li><li><p>결과</p><!-- ![실행화면](result.jpg) --><p><img src="result.jpg" title="실행화면" style="border: 1px solid black;"></p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;ReactNative-Expo-에-Typescript-적용&quot;&gt;&lt;a href=&quot;#ReactNative-Expo-에-Typescript-적용&quot; class=&quot;headerlink&quot; title=&quot;ReactNative(Expo)에 Typescrip
      
    
    </summary>
    
      <category term="Mobile" scheme="https://celtonrd8.github.io/categories/Mobile/"/>
    
      <category term="React Native" scheme="https://celtonrd8.github.io/categories/Mobile/React-Native/"/>
    
    
      <category term="React Native" scheme="https://celtonrd8.github.io/tags/React-Native/"/>
    
      <category term="Expo" scheme="https://celtonrd8.github.io/tags/Expo/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://celtonrd8.github.io/2018/11/11/hello-world/"/>
    <id>https://celtonrd8.github.io/2018/11/11/hello-world/</id>
    <published>2018-11-11T08:34:39.247Z</published>
    <updated>2018-11-12T12:26:46.506Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
</feed>
