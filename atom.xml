<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>devtory</title>
  
  <subtitle>Summary</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://devtory.github.io/"/>
  <updated>2018-12-08T04:20:51.117Z</updated>
  <id>https://devtory.github.io/</id>
  
  <author>
    <name>devtory</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>ReactNative(Expo)에 Mobx(ES6) 적용하기</title>
    <link href="https://devtory.github.io/2018/11/27/ReactNative(Expo)%EC%97%90%20Mobx(ES6)%20%EC%A0%81%EC%9A%A9%ED%95%98%EA%B8%B0/"/>
    <id>https://devtory.github.io/2018/11/27/ReactNative(Expo)에 Mobx(ES6) 적용하기/</id>
    <published>2018-11-27T05:40:06.000Z</published>
    <updated>2018-12-08T04:20:51.117Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ReactNative-Expo-에-Mobx-ES6-적용하기"><a href="#ReactNative-Expo-에-Mobx-ES6-적용하기" class="headerlink" title="ReactNative(Expo)에 Mobx(ES6) 적용하기"></a>ReactNative(Expo)에 Mobx(ES6) 적용하기</h1><blockquote><p>정리 목적으로 작성한 글 입니다</p></blockquote><blockquote><p>목표 : Expo CLI를 통해 생성된 ES6 프로젝트에 Mobx 적용하기</p></blockquote><ul><li>Why? ES6<ul><li>지금까지 까지 Typescript를 사용했지만, 한가지 아쉬운점은 레퍼런스가 부족하다는점이다. </li><li>다행히 Server와 Web까지는 1~2년 전보다 생태계가  급격히 발전하여 좋은 레퍼런스가 생겨나고 있어 Typescript를 적용하기 좋은 환경이 갖추어졌다.</li><li>하지만 Expo에서는 Typescript에 관한 레퍼런스가 적어,  당분간 Tyepscript를 고집하지 않고 ES6를 사용하고, 추후 조금더 생태계가 조성되면 Typescript를 사용 해야겠다.</li></ul></li></ul><ul><li><p>환경</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Windows 10</span><br><span class="line">Node.js 8.11.2</span><br><span class="line">Expo CLI 2.X (Ver 2.x → CRNA 기능 통합, XDE 웹기반으로 변경)</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>Expo CLI 설치</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> yarn global expo-cli    ※ 또는 npm isntall -g expo-cli</span><br></pre></td></tr></table></figure></li><li><p>프로젝트 생성 </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> expo init &lt;Project Name&gt;  ※ "blank app" 선택</span><br></pre></td></tr></table></figure></li><li><p>MobX 설치</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> cd &lt;Project Name&gt;</span><br><span class="line"><span class="meta">$</span> yarn add mobx mobx-react</span><br></pre></td></tr></table></figure></li><li><p>데코레이터 관련 Babel 플러그인 설치</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> yarn add @babel/plugin-proposal-decorators @babel/plugin-proposal-class-properties --dev</span><br></pre></td></tr></table></figure><ul><li><p>babel.config.js 파일에 플러그인 적용</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">module.exports = function(api) &#123;</span><br><span class="line">  api.cache(true);</span><br><span class="line">  return &#123;</span><br><span class="line">    presets: ['babel-preset-expo'],</span><br><span class="line">    plugins: [</span><br><span class="line">        ['@babel/plugin-proposal-decorators', &#123; legacy: true &#125;],</span><br><span class="line">        ['@babel/plugin-proposal-class-properties', &#123; <span class="attr">"loose"</span>: <span class="literal">true</span>&#125;]</span><br><span class="line">    ]</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ul></li></ul><blockquote><p>단순한 카운터를 만들기 위해 카운터 스토어를 생성</p></blockquote><ul><li><p>엔트리파일 변경</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> mkdir src</span><br><span class="line"><span class="meta">$</span> mv App.js ./src</span><br><span class="line"><span class="meta">$</span> touch App.js</span><br></pre></td></tr></table></figure><ul><li><p>App.js 파일변경</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">'./src/App'</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> App;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>Store 생성</p><ul><li><p>src/stores폴더 생성</p></li><li><p>src/stores/CounterStores.ts 파일 생성 후 아래 내용을 입력</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; observable, action &#125; <span class="keyword">from</span> <span class="string">'mobx'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> CounterStore &#123;</span><br><span class="line">    <span class="meta">@observable</span> counter;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.counter = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@action</span></span><br><span class="line">    increase = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.counter++;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@action</span></span><br><span class="line">    decrease = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.counter--;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>src/stores/createStores.js 파일 생성 후 아래 내용을 입력</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; CounterStore &#125; <span class="keyword">from</span> <span class="string">'./CounterStore'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">createStores</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> counterStore = <span class="keyword">new</span> CounterStore(); <span class="comment">// CounterStore 객체 생성</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        counterStore,</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>src/App.js 파일에 Store를 등록</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="keyword">import</span> &#123; Provider &#125; <span class="keyword">from</span> <span class="string">'mobx-react'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; createStores &#125; <span class="keyword">from</span> <span class="string">'./stores/createStores'</span>;</span><br><span class="line"><span class="keyword">import</span> Counter <span class="keyword">from</span> <span class="string">'./Components/Counter'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> stores = createStores();</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;Provider &#123;...stores&#125;&gt;</span><br><span class="line">        &lt;View style=&#123;styles.container&#125;&gt;</span><br><span class="line">          &lt;Counter /&gt;</span><br><span class="line">        &lt;<span class="regexp">/View&gt;</span></span><br><span class="line"><span class="regexp">      &lt;/</span>Provider&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">...</span><br></pre></td></tr></table></figure></li><li><p>src/components/Counter/index.js 파일을 생성하여 Store 사용 테스트</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Text, View, Button &#125; <span class="keyword">from</span> <span class="string">'react-native'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; observer, inject &#125; <span class="keyword">from</span> <span class="string">'mobx-react'</span>;</span><br><span class="line"></span><br><span class="line">@inject(<span class="string">'counterStore'</span>)</span><br><span class="line">@observer</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; counter, increase, decrease&#125; = <span class="keyword">this</span>.props.counterStore;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;View&gt;</span><br><span class="line">        &lt;Text&gt;&#123;counter&#125;&lt;<span class="regexp">/Text&gt;</span></span><br><span class="line"><span class="regexp">        &lt;Button</span></span><br><span class="line"><span class="regexp">          onPress=&#123;increase&#125;</span></span><br><span class="line"><span class="regexp">          title="Increase"</span></span><br><span class="line"><span class="regexp">        /</span>&gt;</span><br><span class="line">        &lt;Button </span><br><span class="line">          onPress=&#123;decrease&#125;</span><br><span class="line">          title=<span class="string">"Decrease"</span></span><br><span class="line">        /&gt;</span><br><span class="line">      &lt;<span class="regexp">/View&gt;</span></span><br><span class="line"><span class="regexp">    );</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><blockquote><p>만약 VS Code를 사용하고 있다면 ES6를 사용함에도 불구하고, 데코렝터 에서 tslint 경고가 발생하는데, 아래 방법으로 경고 해제</p></blockquote><ul><li><p>Root 폴더 아래 tsconfig.json파일을 생성후 아래 내용을 입력</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"compilerOptions"</span>: &#123;</span><br><span class="line">    <span class="attr">"experimentalDecorators"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"allowJs"</span>: <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>​    </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;ReactNative-Expo-에-Mobx-ES6-적용하기&quot;&gt;&lt;a href=&quot;#ReactNative-Expo-에-Mobx-ES6-적용하기&quot; class=&quot;headerlink&quot; title=&quot;ReactNative(Expo)에 Mobx(ES6)
      
    
    </summary>
    
      <category term="Mobile" scheme="https://devtory.github.io/categories/Mobile/"/>
    
      <category term="ReactNative" scheme="https://devtory.github.io/categories/Mobile/ReactNative/"/>
    
    
      <category term="ReactNative" scheme="https://devtory.github.io/tags/ReactNative/"/>
    
      <category term="Mobx" scheme="https://devtory.github.io/tags/Mobx/"/>
    
      <category term="ES6" scheme="https://devtory.github.io/tags/ES6/"/>
    
  </entry>
  
  <entry>
    <title>비동기 프로그래밍과 콜백 함수</title>
    <link href="https://devtory.github.io/2018/11/23/%EB%B9%84%EB%8F%99%EA%B8%B0%20%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D%EA%B3%BC%20%EC%BD%9C%EB%B0%B1%20%ED%95%A8%EC%88%98/"/>
    <id>https://devtory.github.io/2018/11/23/비동기 프로그래밍과 콜백 함수/</id>
    <published>2018-11-23T06:43:05.000Z</published>
    <updated>2018-12-08T04:30:49.508Z</updated>
    
    <content type="html"><![CDATA[<h1 id="비동기-프로그래밍과-콜백-함수"><a href="#비동기-프로그래밍과-콜백-함수" class="headerlink" title="비동기 프로그래밍과 콜백 함수"></a>비동기 프로그래밍과 콜백 함수</h1><blockquote><p>정리 목적으로 작성한 글 입니다</p></blockquote><h3 id="비동기-프로그래밍과-콜백-함수-1"><a href="#비동기-프로그래밍과-콜백-함수-1" class="headerlink" title="비동기 프로그래밍과 콜백 함수"></a>비동기 프로그래밍과 콜백 함수</h3><ul><li><p>자바스크립트는 싱글스레드(single-threaded) 프로그래밍 언어 이므로 하나의 <strong>콜스택(Call Stack)</strong>을 갖고 있다</p><ul><li><p>예를 들어 A함수 내부에서 B함수를 실행시키는 경우 콜스택을 보면,</p><ul><li><p>A함수, B함수 순으로 콜스택에 저장 된다</p></li><li><p>나중에 입력된 B함수 먼저 실행후 순차적으로 A함수가 실행 된다</p></li><li><p>위 동작을 코드와 이미지로 보면 아래와 같다</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">funcB</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">funcA</span>(<span class="params"></span>) </span>&#123;    </span><br><span class="line">    funcB();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">funcA();</span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ul><pre><code>&lt;img​      src=&quot;callstack_example.png&quot;​      title=&quot;콜스택 동작&quot;  /&gt;</code></pre><ul><li><p>만약, 콜스택에서 실행되는 함수가 실행 시간이 길거나, 응답을 대기해야 하는 함수인 경우 브라우저 또는 Node.js는 <strong>블록킹</strong> 상태 된다</p><ul><li><p>블록킹 상태에서, Node.js 서버는 다른 요청을 처리 할 수 없고, 브라우저는 UI가 응답대기 상태로 멈춰있게 되어 부정적인 사용자 경험을 제공</p></li><li><p>따라서 브라우저와 Node.js는  <strong>논블록킹 방식의 함수들</strong>을 제공하여 비동기 동작을 기본으로 한다  (블록킹 방식의 함수도 제공)</p><ul><li><p>논블록킹 방식의 함수는 실행 지점에서 결과를 받을때 까지 <strong>대기하지 않고</strong>, 바로 다음 구문을 실행 하므로 결과는 <strong>콜백 함수</strong>를 이용해 나중에 처리 한다</p></li><li><p>대표적인 논블록킹(비동기) 함수인 fs.readFile()는 아래 코드와 같이, 콜백함수를 통해 결과를 처리하며, 블록킹 되지 않기 때문에 바로 다음에 호출되는 console.log()를 처리한다</p>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"></span><br><span class="line">fs.readFile(<span class="string">'/file.md'</span>, (err, data) =&gt; &#123; </span><br><span class="line">  <span class="keyword">if</span> (err) <span class="keyword">throw</span> err; </span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'result'</span>); <span class="comment">// 콜백함수를 통해 결과를 처리</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'after read file'</span>); <span class="comment">// fs.readfile() 이후 바로 실행</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//// 실행결과</span></span><br><span class="line">after read file</span><br><span class="line">result</span><br></pre></td></tr></table></figure></li><li><p>블록킹과 논블록킹을 http 요청/응답을 예로들어 타임라인 상에 표현해보면 아래와 같다<br><img src="blocking_vs_nonblocking.png" title="블록킹 vs 논블록킹"></p></li></ul></li></ul></li><li><p><strong>이벤트 루프(event loop)</strong>와 <strong>콜백큐(callback queue)</strong>는 콜백 함수들을 관리한다</p><ul><li><p>이벤트 루프와 콜백큐는 웹 API(Node.js의 경우 C++ API) 같이 자바스크립트 엔진 <strong>외부에 존재</strong></p></li><li><p>자바스크립트 엔진 내부에 함수가 실행되면 콜스택에 저장되고,  콜백함수들은 콜백큐에 저장</p></li><li><p>이때, 이벤트 루프는 <strong>콜스택을 감시</strong>하다가 함수가 실행되어 콜스택이 비워지게 되면 콜백큐에 저장된 콜백함수를 실행한다</p></li><li><p>비동기 동작의 예로, 웹 API인 setTimeout()함수 호출시 코드는 아래와 같다</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">"Start!"</span>);</span><br><span class="line"></span><br><span class="line">setTimeout(<span class="function"><span class="keyword">function</span> <span class="title">timeout</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"Timeout Callback!"</span>);</span><br><span class="line">&#125;, <span class="number">2000</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"Next statement!"</span>);</span><br></pre></td></tr></table></figure></li><li><p>실행결과는 아래와 같다</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Start!</span><br><span class="line">Next Statement!</span><br><span class="line">Timeout Callback!</span><br></pre></td></tr></table></figure></li><li><p>위 코드의 흐름을 그림으로 나타내보면 아래와 같다</p><p>  &lt;img</p><pre><code>src=&quot;async_flow.png&quot;title=&quot;콜스택 동작&quot;style=&quot;height: 100%; width:100%&quot;</code></pre><p>  /&gt;</p></li></ul></li><li><p>자바 스크립트는 위와 같이 논블로킹 방식의 함수와 콜백 함수를 통해 단일 스레드에서 <strong>동시성(concurrency)</strong>을 제공한다</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;비동기-프로그래밍과-콜백-함수&quot;&gt;&lt;a href=&quot;#비동기-프로그래밍과-콜백-함수&quot; class=&quot;headerlink&quot; title=&quot;비동기 프로그래밍과 콜백 함수&quot;&gt;&lt;/a&gt;비동기 프로그래밍과 콜백 함수&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;정
      
    
    </summary>
    
      <category term="Javascript" scheme="https://devtory.github.io/categories/Javascript/"/>
    
    
      <category term="javascript" scheme="https://devtory.github.io/tags/javascript/"/>
    
      <category term="비동기" scheme="https://devtory.github.io/tags/%EB%B9%84%EB%8F%99%EA%B8%B0/"/>
    
      <category term="asynchronous" scheme="https://devtory.github.io/tags/asynchronous/"/>
    
      <category term="콜백" scheme="https://devtory.github.io/tags/%EC%BD%9C%EB%B0%B1/"/>
    
      <category term="callback" scheme="https://devtory.github.io/tags/callback/"/>
    
  </entry>
  
  <entry>
    <title>Express에 Typescript와 Inversify 적용하기</title>
    <link href="https://devtory.github.io/2018/11/16/Express%EC%97%90%20Typescript%EC%99%80%20Inversify%20%EC%A0%81%EC%9A%A9%ED%95%98%EA%B8%B0/"/>
    <id>https://devtory.github.io/2018/11/16/Express에 Typescript와 Inversify 적용하기/</id>
    <published>2018-11-16T01:41:47.000Z</published>
    <updated>2018-12-08T04:05:25.469Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Express에-Typescript와-Inversify-적용하기"><a href="#Express에-Typescript와-Inversify-적용하기" class="headerlink" title="Express에 Typescript와 Inversify 적용하기"></a>Express에 Typescript와 Inversify 적용하기</h2><blockquote><p>정리 목적으로 작성한 글 입니다</p></blockquote><blockquote><p>목표 :  Express 프로젝트에 Typescript와 Inversify를 적용</p></blockquote><ul><li><p>환경</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Windows 10</span><br><span class="line">Node.js 8.11.2</span><br><span class="line">Npm 6.4.1 / yarn 1.7.0</span><br></pre></td></tr></table></figure></li><li><p>프로젝트 생성</p>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> mkdir &lt;프로젝트 폴더&gt;</span><br><span class="line"><span class="meta">$</span> cd &lt;프로젝트폴더&gt;</span><br><span class="line"><span class="meta">$</span> npm init    ※ 요구하는 입력 사항은 상황에 따라 적당히 입력</span><br></pre></td></tr></table></figure></li><li><p>yarn 설치</p><ul><li><p>yarn 사용</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> npm install -g yarn</span><br></pre></td></tr></table></figure></li></ul></li><li><p>Typescript 관련 패키지 설치</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> yarn add typescript ts-node --dev</span><br></pre></td></tr></table></figure><ul><li><p>루트 폴더 아래 tsconfig.json 파일 생성 후 아래 내용 추가</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"compilerOptions"</span>: &#123;</span><br><span class="line">        <span class="attr">"module"</span>: <span class="string">"commonjs"</span>,</span><br><span class="line">        <span class="attr">"target"</span>: <span class="string">"es6"</span>,</span><br><span class="line">        <span class="attr">"lib"</span>: [</span><br><span class="line">            <span class="string">"es6"</span>,</span><br><span class="line">            <span class="string">"dom"</span></span><br><span class="line">        ],</span><br><span class="line">        <span class="attr">"noImplicitAny"</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="attr">"sourceMap"</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">"emitDecoratorMetadata"</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">"experimentalDecorators"</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">"moduleResolution"</span>: <span class="string">"node"</span>,</span><br><span class="line">        <span class="attr">"noUnusedLocals"</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">"resolveJsonModule"</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">"allowJs"</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">"outDir"</span>: <span class="string">"./dist"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"compileOnSave"</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">"exclude"</span>: [</span><br><span class="line">      <span class="string">"node_modules"</span></span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>express 관련 패키지 설치</p><ul><li>Rest API를 만들것이므로, 템플릿 관련 패키지는 설치하지 않음</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> yarn add express body-parser cors nodemon</span><br><span class="line"><span class="meta">$</span> yarn add @types/express @types/body-parser @types/cors --dev</span><br></pre></td></tr></table></figure><ul><li>body-parser 미들웨어 <ul><li>요청 데이터를 파싱하여 req.body객체로 접근하는 것을 도와주는 미들웨어</li></ul></li><li>cors 미들웨어 <ul><li>CORS를 제한하는 브라우저 사용시 이를 피하기 위해 사용</li></ul></li><li>nodemon <ul><li>코드 수정시 서버를 자동을 갱신해주는 유틸</li></ul></li></ul></li><li><p>inversify 관련 패키지 설치</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> yarn add reflect-metadata</span><br><span class="line"><span class="meta">$</span> yarn add inversify inversify-binding-decorators inversify-express-utils</span><br></pre></td></tr></table></figure><ul><li>reflect-metadata <ul><li>typescript의 데코레이터와 같이 실험적인 메타데이터 API를 사용하기 위해 필요한 라이브러리 </li></ul></li><li>inversify <ul><li>IOC 컨테이너 라이브러리로, angular2+와 같이 의존성 주입을 통해 서비스를 사용 할 수 있도록 해주는 라이브러리</li></ul></li></ul></li></ul><blockquote><p>이제부터 express를 구동을 위한 설정</p></blockquote><ul><li><p>엔트리 포인트 생성</p><ul><li><p>루트 폴더 아래 index.js파일 생성 (package.json이 있는 폴더) </p>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">require</span>(<span class="string">'ts-node/register'</span>);</span><br><span class="line"><span class="built_in">require</span>(<span class="string">'./src/bootstrap'</span>);</span><br></pre></td></tr></table></figure></li></ul></li><li><p>파일생성</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">+-- src</span><br><span class="line">     +-- controllers/Hello.controller.ts</span><br><span class="line">     +-- services/Hello.service.ts</span><br><span class="line">     bootstrap.ts</span><br></pre></td></tr></table></figure></li><li><p>서비스파일 작성</p><ul><li><p>Hello.service.ts 파일을 아래와 같이 작성 </p></li><li><p>서비스를 통해 Controller와 관심사를 분리 하여 Controller 단순화 (여기서는 데이터베이스를 실제 조작하는 코드 작성)</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; injectable &#125; <span class="keyword">from</span> <span class="string">'inversify'</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@injectable</span>()</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> HelloService &#123;</span><br><span class="line">  <span class="keyword">public</span> getData() &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      state: <span class="string">"success"</span>,</span><br><span class="line">      message: <span class="string">"Hello Express, Typescript, Inversify!"</span>,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>@injectable()<ul><li>의존성 주입이 가능함을 명시해주는 데코레이터</li><li>IOC 컨테이너에 등록 하면 이후에는 의존성 주입을 통해 제어권을 컨테이너가 조정</li></ul></li></ul></li><li><p>서버시작 및 서비스 파일 등록</p><ul><li><p>bootstrap.ts 파일을 아래와 같이 작성</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'reflect-metadata'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> bodyParser <span class="keyword">from</span> <span class="string">'body-parser'</span>;</span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> cors <span class="keyword">from</span> <span class="string">'cors'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; InversifyExpressServer &#125; <span class="keyword">from</span> <span class="string">'inversify-express-utils'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; AsyncContainerModule, Container &#125; <span class="keyword">from</span> <span class="string">'inversify'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; HelloService &#125; <span class="keyword">from</span> <span class="string">'./services/Hello.service'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Bind Controller */</span></span><br><span class="line"><span class="keyword">const</span> bindings = <span class="keyword">new</span> AsyncContainerModule(<span class="keyword">async</span> (bind) =&gt; &#123;</span><br><span class="line">  <span class="keyword">await</span> <span class="built_in">require</span>(<span class="string">'./controllers/Hello.controller'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">bootstrap</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">/* Create IOC Container */</span></span><br><span class="line">  <span class="keyword">let</span> inversify_ioc = <span class="keyword">new</span> Container();</span><br><span class="line">  <span class="keyword">await</span> inversify_ioc.loadAsync(bindings);</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Add Service */</span></span><br><span class="line">  inversify_ioc.bind&lt;HelloService&gt;(<span class="string">'HelloService'</span>).to(HelloService);</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Express Server &amp; Middleware */</span></span><br><span class="line">  <span class="keyword">let</span> server = <span class="keyword">new</span> InversifyExpressServer(inversify_ioc);  </span><br><span class="line">  </span><br><span class="line">  server.setConfig(<span class="function">(<span class="params">app</span>) =&gt;</span> &#123;</span><br><span class="line">    app.use(bodyParser.urlencoded(&#123;extended: <span class="literal">true</span>&#125;));</span><br><span class="line">    app.use(bodyParser.json());</span><br><span class="line">    app.use(cors());</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> serverBuild = server.build();</span><br><span class="line">  serverBuild.listen(<span class="number">3301</span>, <span class="string">'127.0.0.1'</span>);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`Start server..`</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`Listen server on port : 3301..`</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">bootstrap();</span><br></pre></td></tr></table></figure><ul><li>Bind Controller 이하<ul><li>컨트롤러 파일을 Inversefy 컨테이너 모듈과 바인딩</li><li>URL을 컨트롤러 파일 내부 클래스/매소드와 맵핑</li><li>이후 생성되는 컨트롤러는 아래에 계속해서 추가</li></ul></li><li>Add Service 이하<ul><li>위에서 생성한 Hello.service.ts 파일을 컨테이너에 등록</li><li>일반적인 객체 뿐만 아니라 싱글톤등 다양한 형식을 지원</li><li>이후 생성되는 서비스는 아래에 계속해서 바인딩</li></ul></li><li>Express Server &amp; Middleware 이하<ul><li>inversify-express-util에서 제공하는 방식으로 Express 서버를 생성하고 미들웨어를 등록</li></ul></li></ul></li><li><p>컨트롤러 작성</p><ul><li><p>Hello.controller.ts 파일 작성</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> express <span class="keyword">from</span> <span class="string">'express'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; inject &#125; <span class="keyword">from</span> <span class="string">'inversify'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; controller, httpGet, response, request &#125; <span class="keyword">from</span> <span class="string">'inversify-express-utils'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; HelloService &#125; <span class="keyword">from</span> <span class="string">'../services/Hello.service'</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@controller</span>(<span class="string">'/hello'</span>)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> HelloController &#123;</span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params">  </span></span><br><span class="line"><span class="params">    <span class="meta">@inject</span>(<span class="string">'HelloService'</span>) <span class="keyword">private</span> _hello: HelloService</span></span><br><span class="line"><span class="params">  </span>) &#123; &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@httpGet</span>(<span class="string">'/'</span>)</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">async</span> getData(<span class="meta">@response</span>() res: express.Response, <span class="meta">@request</span>() req: express.Request) &#123;</span><br><span class="line">    <span class="keyword">return</span> res.status(<span class="number">200</span>).json(<span class="keyword">this</span>._hello.getData())</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>위에서 생성한 Hello 서비스를 HelloController의 생성자에 private 멤버 변수로 주입</li><li>컨트롤러 내부에서는 this._hello를 통해 Hello서비스에 접근/사용</li><li>컨트롤러와 서비스가 분리되어 컨트롤러 로직이 훨씬 단순해짐</li></ul></li></ul></li></ul></li></ul></li><li><p>스크립트 등록</p><ul><li><p>package.json의 scripts 부분을 수정</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;  </span><br><span class="line">  ...</span><br><span class="line">  "scripts": &#123;</span><br><span class="line">    "start": "node index.js",</span><br><span class="line">    "start:watch": "nodemon index.js",</span><br><span class="line">    "start:prod": "rm -rf ./dist/ &amp;&amp; tsc &amp;&amp; node dist/index.js"</span><br><span class="line">  &#125;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>실행</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn start:watch    # nodemon을 통해 실행</span><br></pre></td></tr></table></figure></li></ul><p>*<br>  <!-- ![실행화면](result.jpg) --><br>  <img src="postman_result.jpg" title="실행화면" style="border: 1px solid black;"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Express에-Typescript와-Inversify-적용하기&quot;&gt;&lt;a href=&quot;#Express에-Typescript와-Inversify-적용하기&quot; class=&quot;headerlink&quot; title=&quot;Express에 Typescript와 I
      
    
    </summary>
    
      <category term="Backend" scheme="https://devtory.github.io/categories/Backend/"/>
    
      <category term="Express" scheme="https://devtory.github.io/categories/Backend/Express/"/>
    
      <category term="Typescirpt" scheme="https://devtory.github.io/categories/Backend/Express/Typescirpt/"/>
    
    
      <category term="Backend" scheme="https://devtory.github.io/tags/Backend/"/>
    
      <category term="Express" scheme="https://devtory.github.io/tags/Express/"/>
    
      <category term="Typescript" scheme="https://devtory.github.io/tags/Typescript/"/>
    
  </entry>
  
  <entry>
    <title>React Typescript 프로젝트에 MobX 적용</title>
    <link href="https://devtory.github.io/2018/11/13/React%20Typescript%20%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8%EC%97%90%20MobX%20%EC%A0%81%EC%9A%A9/"/>
    <id>https://devtory.github.io/2018/11/13/React Typescript 프로젝트에 MobX 적용/</id>
    <published>2018-11-13T06:06:19.000Z</published>
    <updated>2018-12-08T04:18:37.568Z</updated>
    
    <content type="html"><![CDATA[<h2 id="React-Typescript-프로젝트에-MobX-적용"><a href="#React-Typescript-프로젝트에-MobX-적용" class="headerlink" title="React Typescript 프로젝트에 MobX 적용"></a>React Typescript 프로젝트에 MobX 적용</h2><blockquote><p>정리 목적으로 작성한 글 입니다</p></blockquote><blockquote><p>목표 : Typescript로 구성된 React 프로젝트에 MobX를 적용하고 Store 기반의 라우터 사용</p></blockquote><ul><li><p>환경</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Windows 10</span><br><span class="line">Node.js 8.11.2</span><br><span class="line">CRA 2.1.1</span><br></pre></td></tr></table></figure></li><li><p>MobX ?</p><ul><li><p>MobX는 Redux와 함께 가장 인기있는 상태관리 라이브러리 중 하나</p></li><li><p>공식홈페이지에서는 MobX를 매우 단순하고 확장성이 좋다고 소개 하고 있다</p></li><li><p>MobX는 React가 상태를 저장하고 업데이트 하는 방식과 유사한 메커니즘을 제공하기 때문에  React와의 조합이 매우 좋다</p></li></ul></li></ul><blockquote><p>프로젝트를 생성 후 MobX를 적용</p></blockquote><ul><li><p>crea-react-app으로 Typescript 프로젝트 생성</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> npm install -g create-react-app</span><br><span class="line"><span class="meta">$</span> create-react-app &lt;프로젝트명&gt; --scripts-version=react-scripts-ts</span><br></pre></td></tr></table></figure></li><li><p>mobx, react-router 설치</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> cd &lt;프로젝트명&gt;</span><br><span class="line"><span class="meta">$</span> yarn add mobx mobx-react</span><br></pre></td></tr></table></figure><ul><li>mobX는 타이프스크립트로 작성되어, 타입정의파일(d.ts)이 별도 설치가 필요 없음</li></ul></li><li><p>데코레이터를 사용하기 위해 tsconfig.json 파일에 아래내용 추가</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">"compilerOptions"</span>: &#123;</span><br><span class="line">...,</span><br><span class="line">"experimentalDecorators": true</span><br><span class="line">&#125;,</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>(선택사항) tslint.json에 귀찮은 옵션을 해제</p><ul><li>“ordered-imports”는 모듈 import시 A, B, C 순으로 호출하지 않을 경우 경고 발생 시키므로 해제</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  ...</span><br><span class="line">"rules": &#123;</span><br><span class="line">    "ordered-imports": false</span><br><span class="line">  &#125;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>디렉토리 구조</p><ul><li>디렉토리 구조에 대한 대한 표준은 없이 개발자에 따라 다름</li><li>아래와 같은 구조로 폴더를 생성</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">+-- src</span><br><span class="line">   +-- stores        ※ 여러개의 store 생성 가능</span><br><span class="line">   +-- constant      ※ props로 전달되는 store 객체의 Key값으로 사용될 상수</span><br><span class="line">   +-- view</span><br><span class="line">       +-- containers   ※ store가 주입(inject)되는 컴포넌트</span><br><span class="line">       +-- components   ※ props를 통해 container로부터  store데이터를 전달받음</span><br><span class="line">                          (권장사항으로 component에서 직접 store를 주입해도 상관없습니다)</span><br></pre></td></tr></table></figure></li></ul><blockquote><p>단순한 카운터를 예를 들어 스토어와 아래 컴포넌트를 생성 하기</p></blockquote><ul><li><p>Store 생성</p><ul><li><p>src/stores/CounterStore.ts 파일 생성 후 아래 내용을 입력</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; observable, action &#125; <span class="keyword">from</span> <span class="string">'mobx'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> CounterStore &#123;</span><br><span class="line">    <span class="meta">@observable</span> <span class="keyword">public</span> counter: <span class="built_in">number</span>;</span><br><span class="line">    <span class="keyword">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.counter = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@action</span></span><br><span class="line">    <span class="keyword">public</span> increase = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.counter++;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@action</span></span><br><span class="line">    <span class="keyword">public</span> decrease = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.counter--;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>데코레이터 설명</p><ul><li>@observable <ul><li>observer로 관찰 가능해짐, 즉 값이 변경되면 observer에게 알림</li></ul></li><li>@action<ul><li>@observable값을 변경 시키는 경우 사용</li></ul></li></ul></li></ul></li><li><p>Store를 구분하기 위한 키(상수) 등록</p><ul><li><p>src/constant/stores.const.ts파일 생성후 아래 내용을 입력</p></li><li><p>정해진 형식이 없어 나름의 기준으로 이름 선정</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> COUNTER_STORE = <span class="string">'counter_store'</span>;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>Store를 생성하기 위한 함수를 생성</p><ul><li><p>src/stores/createStores.ts파일 생성후 아래 내용을 입력</p></li><li><p>이후 추가되는 Store는 모두 이곳에 추가</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; CounterStore &#125; <span class="keyword">from</span> <span class="string">'./CounterStore'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; COUNTER_STORE &#125; <span class="keyword">from</span> <span class="string">'src/constant/stores.const'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">createStores</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> counterStore = <span class="keyword">new</span> CounterStore(); <span class="comment">// CounterStore 객체 생성</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        [COUNTER_STORE]: counterStore,</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>Store 등록</p><ul><li><p>src/index.tsx파일을 아래와 같이 수정</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; Provider &#125; <span class="keyword">from</span> <span class="string">'mobx-react'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; createStores &#125; <span class="keyword">from</span> <span class="string">'src/stores/createStores'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> stores = createStores();</span><br><span class="line"></span><br><span class="line">ReactDOM.render(</span><br><span class="line">  &lt;Provider &#123;...stores&#125;&gt;</span><br><span class="line">    &lt;App /&gt;</span><br><span class="line">  &lt;<span class="regexp">/Provider&gt;,</span></span><br><span class="line"><span class="regexp">  document.getElementById('root') as HTMLElement</span></span><br><span class="line"><span class="regexp">);</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">...</span></span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ul><blockquote><p>스토어 사용</p></blockquote><ul><li><p>컴포넌트 만들기</p><ul><li><p>src/view/containers/Counter/index.tsx 파일을 생성</p></li><li><p>예제 이므로 components 폴더는 사용하지 않고 containers에 모두 작성</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; observer, inject &#125; <span class="keyword">from</span> <span class="string">'mobx-react'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; CounterStore &#125; <span class="keyword">from</span> <span class="string">'src/stores/CounterStore'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; COUNTER_STORE &#125; <span class="keyword">from</span> <span class="string">'src/constant/stores.const'</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@inject</span>(</span><br><span class="line">  COUNTER_STORE</span><br><span class="line">)</span><br><span class="line"><span class="meta">@observer</span></span><br><span class="line"><span class="keyword">class</span> Counter <span class="keyword">extends</span> React.Component&lt;&#123;&#125;, &#123;&#125;&gt; &#123;</span><br><span class="line">  <span class="keyword">public</span> render() &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; counter, increase, decrease &#125; = (<span class="keyword">this</span>.props[COUNTER_STORE] <span class="keyword">as</span> CounterStore);</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;h2&gt;Counter : &#123;counter&#125;&lt;<span class="regexp">/h2&gt;</span></span><br><span class="line"><span class="regexp">        &lt;button onClick=&#123;increase&#125;&gt;Increase&lt;/</span>button&gt;</span><br><span class="line">        &lt;button onClick=&#123;decrease&#125;&gt;Decrease&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">      &lt;/</span>div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Counter;</span><br></pre></td></tr></table></figure><ul><li>@inject <ul><li>컴포넌트의 props에 스토어 주입</li></ul></li><li>@observer<ul><li>스토어의 변화를 관찰하여 업데이트시 결과 반영</li></ul></li></ul></li></ul></li></ul><ul><li><p>참고</p><ul><li><a href="https://github.com/mobxjs/mobx" target="_blank" rel="noopener">mobx 공식 저장소</a></li></ul></li><li><p>결과</p></li></ul><!-- ![실행화면](result.jpg) --><p><img src="result.gif" title="실행화면"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;React-Typescript-프로젝트에-MobX-적용&quot;&gt;&lt;a href=&quot;#React-Typescript-프로젝트에-MobX-적용&quot; class=&quot;headerlink&quot; title=&quot;React Typescript 프로젝트에 MobX 적용&quot;&gt;
      
    
    </summary>
    
      <category term="Frontend" scheme="https://devtory.github.io/categories/Frontend/"/>
    
      <category term="React" scheme="https://devtory.github.io/categories/Frontend/React/"/>
    
    
      <category term="Mobx" scheme="https://devtory.github.io/tags/Mobx/"/>
    
      <category term="React" scheme="https://devtory.github.io/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>ReactNative(Expo)에 Typescript 적용</title>
    <link href="https://devtory.github.io/2018/11/11/ReactNative(Expo)%EC%97%90%20Typescript%20%EC%A0%81%EC%9A%A9/"/>
    <id>https://devtory.github.io/2018/11/11/ReactNative(Expo)에 Typescript 적용/</id>
    <published>2018-11-11T08:41:47.000Z</published>
    <updated>2018-12-08T04:22:11.764Z</updated>
    
    <content type="html"><![CDATA[<h2 id="ReactNative-Expo-에-Typescript-적용"><a href="#ReactNative-Expo-에-Typescript-적용" class="headerlink" title="ReactNative(Expo)에 Typescript 적용"></a>ReactNative(Expo)에 Typescript 적용</h2><blockquote><p>정리 목적으로 작성한 글 입니다</p></blockquote><blockquote><p>목표 : Expo CLI를 통해 생성된 프로젝트에 Typescript 적용</p></blockquote><ul><li><p>환경</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Windows 10</span><br><span class="line">Node.js 8.11.2</span><br><span class="line">Expo CLI 2.X (Ver 2.x → CRNA 기능 통합, XDE 웹기반으로 변경)</span><br></pre></td></tr></table></figure></li><li><p>Expo CLI 설치</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> yarn global expo-cli    ※ 또는 npm isntall -g expo-cli</span><br></pre></td></tr></table></figure></li><li><p>프로젝트 생성 </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> expo init &lt;Project Name&gt;  ※ "blank app" 선택</span><br></pre></td></tr></table></figure></li><li><p>Typescript관련 패키지 설치</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> cd &lt;Project Name&gt;</span><br><span class="line"><span class="meta">$</span> yarn add typescript react-native-typescript-transformer tslib</span><br><span class="line"><span class="meta">$</span> yarn add @types/react @types/react-native @types/expo @types/expo__vector-icons --dev</span><br></pre></td></tr></table></figure><ul><li><p>tsconfig.json 파일 생성 &amp; 수정</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> ./node_modules/.bin/tsc.cmd --init  ※ "tsconfig.json"파일 생성</span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"compilerOptions"</span>: &#123;</span><br><span class="line">      <span class="attr">"target"</span>: <span class="string">"es2017"</span>,</span><br><span class="line">      <span class="attr">"module"</span>: <span class="string">"es2015"</span>,</span><br><span class="line">      <span class="attr">"lib"</span>: [</span><br><span class="line">          <span class="string">"es2017"</span></span><br><span class="line">      ],</span><br><span class="line">      <span class="attr">"jsx"</span>: <span class="string">"react-native"</span>,</span><br><span class="line">      <span class="attr">"sourceMap"</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="attr">"noEmit"</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="attr">"importHelpers"</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="attr">"moduleResolution"</span>: <span class="string">"node"</span>,</span><br><span class="line">      <span class="attr">"allowSyntheticDefaultImports"</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="attr">"experimentalDecorators"</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="attr">"emitDecoratorMetadata"</span>: <span class="literal">true</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"exclude"</span>: [</span><br><span class="line">      <span class="string">"node_modules"</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>tslint.json 파일 생성</p><ul><li><p>세부 설정은 <a href="https://palantir.github.io/tslint/rules/" target="_blank" rel="noopener">tslint 공식홈</a> 참조</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"extends"</span>: [<span class="string">"tslint:recommended"</span>, <span class="string">"tslint-react"</span>, <span class="string">"tslint-config-prettier"</span>],</span><br><span class="line">  <span class="attr">"linterOptions"</span>: &#123;</span><br><span class="line">    <span class="attr">"exclude"</span>: [</span><br><span class="line">      <span class="string">"config/**/*.js"</span>,</span><br><span class="line">      <span class="string">"node_modules/**/*.ts"</span>,</span><br><span class="line">      <span class="string">"coverage/lcov-report/*.js"</span></span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>app.json파일  수정</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"expo"</span>: &#123;</span><br><span class="line">        <span class="attr">"packagerOpts"</span>: &#123;</span><br><span class="line">          <span class="attr">"sourceExts"</span>: [<span class="string">"ts"</span>, <span class="string">"tsx"</span>],</span><br><span class="line">          <span class="attr">"transformer"</span>: <span class="string">"node_modules/react-native-typescript-transformer/index.js"</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>파일명 변경</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> mkdir src</span><br><span class="line"><span class="meta">$</span> mv App.js src/App.tsx</span><br></pre></td></tr></table></figure><ul><li><p>App.ts 파일생성</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">'./src/App'</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> App;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>실행</p><ul><li>스마트 폰에 Expo앱 설치후 아래 명령어 입력</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ expo start    ※ 스마트폰에서 생성된 QR코드 스캔</span><br></pre></td></tr></table></figure></li><li><p>결과</p><!-- ![실행화면](result.jpg) --><p><img src="result.jpg" title="실행화면" style="border: 1px solid black;"></p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;ReactNative-Expo-에-Typescript-적용&quot;&gt;&lt;a href=&quot;#ReactNative-Expo-에-Typescript-적용&quot; class=&quot;headerlink&quot; title=&quot;ReactNative(Expo)에 Typescrip
      
    
    </summary>
    
      <category term="Mobile" scheme="https://devtory.github.io/categories/Mobile/"/>
    
      <category term="ReactNative" scheme="https://devtory.github.io/categories/Mobile/ReactNative/"/>
    
    
      <category term="Typescript" scheme="https://devtory.github.io/tags/Typescript/"/>
    
      <category term="ReactNative" scheme="https://devtory.github.io/tags/ReactNative/"/>
    
      <category term="Expo" scheme="https://devtory.github.io/tags/Expo/"/>
    
  </entry>
  
</feed>
